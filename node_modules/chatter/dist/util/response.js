'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.normalizeMessages = exports.normalizeMessage = exports.isMessage = undefined;
exports.isArrayOfMessages = isArrayOfMessages;
exports.normalizeResponse = normalizeResponse;

var _ramda = require('ramda');

var _ramda2 = _interopRequireDefault(_ramda);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Is the argument a message? It's a message if it's an Array, nested Arrays, or
// a value comprised solely of String, Number, null, undefined or false values.
var isMessage = exports.isMessage = _ramda2.default.pipe(function (arg) {
  return [arg];
}, _ramda2.default.flatten, _ramda2.default.reject(function (s) {
  return _ramda2.default.isNil(s) || s === false || typeof s === 'string' || typeof s === 'number';
}), _ramda2.default.length, _ramda2.default.equals(0));

// Is the argument an array of messages?
function isArrayOfMessages(messages) {
  return Array.isArray(messages) && messages.every(isMessage);
}

// Flatten message array and remove null, undefined or false items, then join
// on newline.
var normalizeMessage = exports.normalizeMessage = _ramda2.default.pipe(function (arg) {
  return [arg];
}, _ramda2.default.flatten, _ramda2.default.reject(function (s) {
  return _ramda2.default.isNil(s) || s === false;
}), _ramda2.default.join('\n'));

// Normalize an array of messages, removing null, undefined or false items.
var normalizeMessages = exports.normalizeMessages = _ramda2.default.pipe(_ramda2.default.reject(function (s) {
  return _ramda2.default.isNil(s) || s === false;
}), _ramda2.default.map(normalizeMessage));

// Normalize response into an array of 0 or more text messages. For each
// "message", flatten all arrays, remove any false, null or undefined values,
// and join the resulting flattened and filtered array on newline.
function normalizeResponse() {
  var response = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  if (isMessage(response)) {
    return [normalizeMessage(response)];
  } else if (isArrayOfMessages(response.messages)) {
    return normalizeMessages(response.messages);
  } else if ('message' in response && isMessage(response.message)) {
    return [normalizeMessage(response.message)];
  }
  return false;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL3Jlc3BvbnNlLmpzIl0sIm5hbWVzIjpbImlzQXJyYXlPZk1lc3NhZ2VzIiwibm9ybWFsaXplUmVzcG9uc2UiLCJpc01lc3NhZ2UiLCJwaXBlIiwiYXJnIiwiZmxhdHRlbiIsInJlamVjdCIsImlzTmlsIiwicyIsImxlbmd0aCIsImVxdWFscyIsIm1lc3NhZ2VzIiwiQXJyYXkiLCJpc0FycmF5IiwiZXZlcnkiLCJub3JtYWxpemVNZXNzYWdlIiwiam9pbiIsIm5vcm1hbGl6ZU1lc3NhZ2VzIiwibWFwIiwicmVzcG9uc2UiLCJtZXNzYWdlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7UUFhZ0JBLGlCLEdBQUFBLGlCO1FBc0JBQyxpQixHQUFBQSxpQjs7QUFuQ2hCOzs7Ozs7QUFFQTtBQUNBO0FBQ08sSUFBTUMsZ0NBQVksZ0JBQUVDLElBQUYsQ0FDdkI7QUFBQSxTQUFPLENBQUNDLEdBQUQsQ0FBUDtBQUFBLENBRHVCLEVBRXZCLGdCQUFFQyxPQUZxQixFQUd2QixnQkFBRUMsTUFBRixDQUFTO0FBQUEsU0FBSyxnQkFBRUMsS0FBRixDQUFRQyxDQUFSLEtBQWNBLE1BQU0sS0FBcEIsSUFBNkIsT0FBT0EsQ0FBUCxLQUFhLFFBQTFDLElBQXNELE9BQU9BLENBQVAsS0FBYSxRQUF4RTtBQUFBLENBQVQsQ0FIdUIsRUFJdkIsZ0JBQUVDLE1BSnFCLEVBS3ZCLGdCQUFFQyxNQUFGLENBQVMsQ0FBVCxDQUx1QixDQUFsQjs7QUFRUDtBQUNPLFNBQVNWLGlCQUFULENBQTJCVyxRQUEzQixFQUFxQztBQUMxQyxTQUFPQyxNQUFNQyxPQUFOLENBQWNGLFFBQWQsS0FBMkJBLFNBQVNHLEtBQVQsQ0FBZVosU0FBZixDQUFsQztBQUNEOztBQUVEO0FBQ0E7QUFDTyxJQUFNYSw4Q0FBbUIsZ0JBQUVaLElBQUYsQ0FDOUI7QUFBQSxTQUFPLENBQUNDLEdBQUQsQ0FBUDtBQUFBLENBRDhCLEVBRTlCLGdCQUFFQyxPQUY0QixFQUc5QixnQkFBRUMsTUFBRixDQUFTO0FBQUEsU0FBSyxnQkFBRUMsS0FBRixDQUFRQyxDQUFSLEtBQWNBLE1BQU0sS0FBekI7QUFBQSxDQUFULENBSDhCLEVBSTlCLGdCQUFFUSxJQUFGLENBQU8sSUFBUCxDQUo4QixDQUF6Qjs7QUFPUDtBQUNPLElBQU1DLGdEQUFvQixnQkFBRWQsSUFBRixDQUMvQixnQkFBRUcsTUFBRixDQUFTO0FBQUEsU0FBSyxnQkFBRUMsS0FBRixDQUFRQyxDQUFSLEtBQWNBLE1BQU0sS0FBekI7QUFBQSxDQUFULENBRCtCLEVBRS9CLGdCQUFFVSxHQUFGLENBQU1ILGdCQUFOLENBRitCLENBQTFCOztBQUtQO0FBQ0E7QUFDQTtBQUNPLFNBQVNkLGlCQUFULEdBQTBDO0FBQUEsTUFBZmtCLFFBQWUsdUVBQUosRUFBSTs7QUFDL0MsTUFBSWpCLFVBQVVpQixRQUFWLENBQUosRUFBeUI7QUFDdkIsV0FBTyxDQUFDSixpQkFBaUJJLFFBQWpCLENBQUQsQ0FBUDtBQUNELEdBRkQsTUFHSyxJQUFJbkIsa0JBQWtCbUIsU0FBU1IsUUFBM0IsQ0FBSixFQUEwQztBQUM3QyxXQUFPTSxrQkFBa0JFLFNBQVNSLFFBQTNCLENBQVA7QUFDRCxHQUZJLE1BR0EsSUFBSSxhQUFhUSxRQUFiLElBQXlCakIsVUFBVWlCLFNBQVNDLE9BQW5CLENBQTdCLEVBQTBEO0FBQzdELFdBQU8sQ0FBQ0wsaUJBQWlCSSxTQUFTQyxPQUExQixDQUFELENBQVA7QUFDRDtBQUNELFNBQU8sS0FBUDtBQUNEIiwiZmlsZSI6InJlc3BvbnNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFIgZnJvbSAncmFtZGEnO1xuXG4vLyBJcyB0aGUgYXJndW1lbnQgYSBtZXNzYWdlPyBJdCdzIGEgbWVzc2FnZSBpZiBpdCdzIGFuIEFycmF5LCBuZXN0ZWQgQXJyYXlzLCBvclxuLy8gYSB2YWx1ZSBjb21wcmlzZWQgc29sZWx5IG9mIFN0cmluZywgTnVtYmVyLCBudWxsLCB1bmRlZmluZWQgb3IgZmFsc2UgdmFsdWVzLlxuZXhwb3J0IGNvbnN0IGlzTWVzc2FnZSA9IFIucGlwZShcbiAgYXJnID0+IFthcmddLFxuICBSLmZsYXR0ZW4sXG4gIFIucmVqZWN0KHMgPT4gUi5pc05pbChzKSB8fCBzID09PSBmYWxzZSB8fCB0eXBlb2YgcyA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHMgPT09ICdudW1iZXInKSxcbiAgUi5sZW5ndGgsXG4gIFIuZXF1YWxzKDApXG4pO1xuXG4vLyBJcyB0aGUgYXJndW1lbnQgYW4gYXJyYXkgb2YgbWVzc2FnZXM/XG5leHBvcnQgZnVuY3Rpb24gaXNBcnJheU9mTWVzc2FnZXMobWVzc2FnZXMpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkobWVzc2FnZXMpICYmIG1lc3NhZ2VzLmV2ZXJ5KGlzTWVzc2FnZSk7XG59XG5cbi8vIEZsYXR0ZW4gbWVzc2FnZSBhcnJheSBhbmQgcmVtb3ZlIG51bGwsIHVuZGVmaW5lZCBvciBmYWxzZSBpdGVtcywgdGhlbiBqb2luXG4vLyBvbiBuZXdsaW5lLlxuZXhwb3J0IGNvbnN0IG5vcm1hbGl6ZU1lc3NhZ2UgPSBSLnBpcGUoXG4gIGFyZyA9PiBbYXJnXSxcbiAgUi5mbGF0dGVuLFxuICBSLnJlamVjdChzID0+IFIuaXNOaWwocykgfHwgcyA9PT0gZmFsc2UpLFxuICBSLmpvaW4oJ1xcbicpXG4pO1xuXG4vLyBOb3JtYWxpemUgYW4gYXJyYXkgb2YgbWVzc2FnZXMsIHJlbW92aW5nIG51bGwsIHVuZGVmaW5lZCBvciBmYWxzZSBpdGVtcy5cbmV4cG9ydCBjb25zdCBub3JtYWxpemVNZXNzYWdlcyA9IFIucGlwZShcbiAgUi5yZWplY3QocyA9PiBSLmlzTmlsKHMpIHx8IHMgPT09IGZhbHNlKSxcbiAgUi5tYXAobm9ybWFsaXplTWVzc2FnZSlcbik7XG5cbi8vIE5vcm1hbGl6ZSByZXNwb25zZSBpbnRvIGFuIGFycmF5IG9mIDAgb3IgbW9yZSB0ZXh0IG1lc3NhZ2VzLiBGb3IgZWFjaFxuLy8gXCJtZXNzYWdlXCIsIGZsYXR0ZW4gYWxsIGFycmF5cywgcmVtb3ZlIGFueSBmYWxzZSwgbnVsbCBvciB1bmRlZmluZWQgdmFsdWVzLFxuLy8gYW5kIGpvaW4gdGhlIHJlc3VsdGluZyBmbGF0dGVuZWQgYW5kIGZpbHRlcmVkIGFycmF5IG9uIG5ld2xpbmUuXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplUmVzcG9uc2UocmVzcG9uc2UgPSB7fSkge1xuICBpZiAoaXNNZXNzYWdlKHJlc3BvbnNlKSkge1xuICAgIHJldHVybiBbbm9ybWFsaXplTWVzc2FnZShyZXNwb25zZSldO1xuICB9XG4gIGVsc2UgaWYgKGlzQXJyYXlPZk1lc3NhZ2VzKHJlc3BvbnNlLm1lc3NhZ2VzKSkge1xuICAgIHJldHVybiBub3JtYWxpemVNZXNzYWdlcyhyZXNwb25zZS5tZXNzYWdlcyk7XG4gIH1cbiAgZWxzZSBpZiAoJ21lc3NhZ2UnIGluIHJlc3BvbnNlICYmIGlzTWVzc2FnZShyZXNwb25zZS5tZXNzYWdlKSkge1xuICAgIHJldHVybiBbbm9ybWFsaXplTWVzc2FnZShyZXNwb25zZS5tZXNzYWdlKV07XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuIl19
