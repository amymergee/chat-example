'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.callMessageHandler = callMessageHandler;
exports.isMessageHandlerOrHandlers = isMessageHandlerOrHandlers;
exports.processMessage = processMessage;

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Pass in a message handler and arguments, and the message handler will be
// called with those arguments.
//
// A message handler may be a function or an object with a handleMessage method.
// A message handler may return a value or a promise that yields a value.
function callMessageHandler(handler) {
  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  if (typeof handler === 'function') {
    return handler.apply(undefined, args);
  } else if (handler && handler.handleMessage) {
    return handler.handleMessage.apply(handler, args);
  }
  throw new TypeError('Message handler must be a function or object with a handleMessage method.');
}

// Facilitate message handler result parsing.
function isMessageHandlerOrHandlers(val) {
  // Ensure arrays consist of only functions or message handler objects.
  if (Array.isArray(val)) {
    return val.every(function (item) {
      return isMessageHandlerOrHandlers(item);
    });
  }
  // Return true if val is a function or message handler object.
  return typeof val === 'function' || val && typeof val.handleMessage === 'function' || false;
}

// Pass specified arguments through a message handler or array of message
// handlers.
//
// If a returned/yielded value is:
// * a message handler or array of message handlers: unroll it/them inline
// * false: skip to the the next message handler
// * anything else: stop iteration and yield that value
//
// If iteration completes and no non-false value was returned/yielded, yield
// false.
function processMessage(handlers) {
  for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    args[_key2 - 1] = arguments[_key2];
  }

  if (!Array.isArray(handlers)) {
    return _bluebird2.default.try(function () {
      return callMessageHandler.apply(undefined, [handlers].concat(args));
    });
  }
  var length = handlers.length;

  var i = 0;
  var next = function next(f) {
    return _bluebird2.default.try(f).then(function (result) {
      if (isMessageHandlerOrHandlers(result)) {
        return next(function () {
          return processMessage.apply(undefined, [result].concat(args));
        });
      } else if (result !== false) {
        return result;
      } else if (i === length) {
        return false;
      }
      return next(function () {
        return processMessage.apply(undefined, [handlers[i++]].concat(args));
      });
    });
  };
  return next(function () {
    return false;
  });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL3Byb2Nlc3MtbWVzc2FnZS5qcyJdLCJuYW1lcyI6WyJjYWxsTWVzc2FnZUhhbmRsZXIiLCJpc01lc3NhZ2VIYW5kbGVyT3JIYW5kbGVycyIsInByb2Nlc3NNZXNzYWdlIiwiaGFuZGxlciIsImFyZ3MiLCJoYW5kbGVNZXNzYWdlIiwiVHlwZUVycm9yIiwidmFsIiwiQXJyYXkiLCJpc0FycmF5IiwiZXZlcnkiLCJpdGVtIiwiaGFuZGxlcnMiLCJ0cnkiLCJsZW5ndGgiLCJpIiwibmV4dCIsImYiLCJ0aGVuIiwicmVzdWx0Il0sIm1hcHBpbmdzIjoiOzs7OztRQU9nQkEsa0IsR0FBQUEsa0I7UUFXQUMsMEIsR0FBQUEsMEI7UUFtQkFDLGMsR0FBQUEsYzs7QUFyQ2hCOzs7Ozs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sU0FBU0Ysa0JBQVQsQ0FBNEJHLE9BQTVCLEVBQThDO0FBQUEsb0NBQU5DLElBQU07QUFBTkEsUUFBTTtBQUFBOztBQUNuRCxNQUFJLE9BQU9ELE9BQVAsS0FBbUIsVUFBdkIsRUFBbUM7QUFDakMsV0FBT0EseUJBQVdDLElBQVgsQ0FBUDtBQUNELEdBRkQsTUFHSyxJQUFJRCxXQUFXQSxRQUFRRSxhQUF2QixFQUFzQztBQUN6QyxXQUFPRixRQUFRRSxhQUFSLGdCQUF5QkQsSUFBekIsQ0FBUDtBQUNEO0FBQ0QsUUFBTSxJQUFJRSxTQUFKLENBQWMsMkVBQWQsQ0FBTjtBQUNEOztBQUVEO0FBQ08sU0FBU0wsMEJBQVQsQ0FBb0NNLEdBQXBDLEVBQXlDO0FBQzlDO0FBQ0EsTUFBSUMsTUFBTUMsT0FBTixDQUFjRixHQUFkLENBQUosRUFBd0I7QUFDdEIsV0FBT0EsSUFBSUcsS0FBSixDQUFVO0FBQUEsYUFBUVQsMkJBQTJCVSxJQUEzQixDQUFSO0FBQUEsS0FBVixDQUFQO0FBQ0Q7QUFDRDtBQUNBLFNBQU8sT0FBT0osR0FBUCxLQUFlLFVBQWYsSUFBOEJBLE9BQU8sT0FBT0EsSUFBSUYsYUFBWCxLQUE2QixVQUFsRSxJQUFpRixLQUF4RjtBQUNEOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sU0FBU0gsY0FBVCxDQUF3QlUsUUFBeEIsRUFBMkM7QUFBQSxxQ0FBTlIsSUFBTTtBQUFOQSxRQUFNO0FBQUE7O0FBQ2hELE1BQUksQ0FBQ0ksTUFBTUMsT0FBTixDQUFjRyxRQUFkLENBQUwsRUFBOEI7QUFDNUIsV0FBTyxtQkFBUUMsR0FBUixDQUFZO0FBQUEsYUFBTWIscUNBQW1CWSxRQUFuQixTQUFnQ1IsSUFBaEMsRUFBTjtBQUFBLEtBQVosQ0FBUDtBQUNEO0FBSCtDLE1BSXpDVSxNQUp5QyxHQUkvQkYsUUFKK0IsQ0FJekNFLE1BSnlDOztBQUtoRCxNQUFJQyxJQUFJLENBQVI7QUFDQSxNQUFNQyxPQUFPLFNBQVBBLElBQU87QUFBQSxXQUFLLG1CQUFRSCxHQUFSLENBQVlJLENBQVosRUFBZUMsSUFBZixDQUFvQixrQkFBVTtBQUM5QyxVQUFJakIsMkJBQTJCa0IsTUFBM0IsQ0FBSixFQUF3QztBQUN0QyxlQUFPSCxLQUFLO0FBQUEsaUJBQU1kLGlDQUFlaUIsTUFBZixTQUEwQmYsSUFBMUIsRUFBTjtBQUFBLFNBQUwsQ0FBUDtBQUNELE9BRkQsTUFHSyxJQUFJZSxXQUFXLEtBQWYsRUFBc0I7QUFDekIsZUFBT0EsTUFBUDtBQUNELE9BRkksTUFHQSxJQUFJSixNQUFNRCxNQUFWLEVBQWtCO0FBQ3JCLGVBQU8sS0FBUDtBQUNEO0FBQ0QsYUFBT0UsS0FBSztBQUFBLGVBQU1kLGlDQUFlVSxTQUFTRyxHQUFULENBQWYsU0FBaUNYLElBQWpDLEVBQU47QUFBQSxPQUFMLENBQVA7QUFDRCxLQVhpQixDQUFMO0FBQUEsR0FBYjtBQVlBLFNBQU9ZLEtBQUs7QUFBQSxXQUFNLEtBQU47QUFBQSxHQUFMLENBQVA7QUFDRCIsImZpbGUiOiJwcm9jZXNzLW1lc3NhZ2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvbWlzZSBmcm9tICdibHVlYmlyZCc7XG5cbi8vIFBhc3MgaW4gYSBtZXNzYWdlIGhhbmRsZXIgYW5kIGFyZ3VtZW50cywgYW5kIHRoZSBtZXNzYWdlIGhhbmRsZXIgd2lsbCBiZVxuLy8gY2FsbGVkIHdpdGggdGhvc2UgYXJndW1lbnRzLlxuLy9cbi8vIEEgbWVzc2FnZSBoYW5kbGVyIG1heSBiZSBhIGZ1bmN0aW9uIG9yIGFuIG9iamVjdCB3aXRoIGEgaGFuZGxlTWVzc2FnZSBtZXRob2QuXG4vLyBBIG1lc3NhZ2UgaGFuZGxlciBtYXkgcmV0dXJuIGEgdmFsdWUgb3IgYSBwcm9taXNlIHRoYXQgeWllbGRzIGEgdmFsdWUuXG5leHBvcnQgZnVuY3Rpb24gY2FsbE1lc3NhZ2VIYW5kbGVyKGhhbmRsZXIsIC4uLmFyZ3MpIHtcbiAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGhhbmRsZXIoLi4uYXJncyk7XG4gIH1cbiAgZWxzZSBpZiAoaGFuZGxlciAmJiBoYW5kbGVyLmhhbmRsZU1lc3NhZ2UpIHtcbiAgICByZXR1cm4gaGFuZGxlci5oYW5kbGVNZXNzYWdlKC4uLmFyZ3MpO1xuICB9XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ01lc3NhZ2UgaGFuZGxlciBtdXN0IGJlIGEgZnVuY3Rpb24gb3Igb2JqZWN0IHdpdGggYSBoYW5kbGVNZXNzYWdlIG1ldGhvZC4nKTtcbn1cblxuLy8gRmFjaWxpdGF0ZSBtZXNzYWdlIGhhbmRsZXIgcmVzdWx0IHBhcnNpbmcuXG5leHBvcnQgZnVuY3Rpb24gaXNNZXNzYWdlSGFuZGxlck9ySGFuZGxlcnModmFsKSB7XG4gIC8vIEVuc3VyZSBhcnJheXMgY29uc2lzdCBvZiBvbmx5IGZ1bmN0aW9ucyBvciBtZXNzYWdlIGhhbmRsZXIgb2JqZWN0cy5cbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuICAgIHJldHVybiB2YWwuZXZlcnkoaXRlbSA9PiBpc01lc3NhZ2VIYW5kbGVyT3JIYW5kbGVycyhpdGVtKSk7XG4gIH1cbiAgLy8gUmV0dXJuIHRydWUgaWYgdmFsIGlzIGEgZnVuY3Rpb24gb3IgbWVzc2FnZSBoYW5kbGVyIG9iamVjdC5cbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicgfHwgKHZhbCAmJiB0eXBlb2YgdmFsLmhhbmRsZU1lc3NhZ2UgPT09ICdmdW5jdGlvbicpIHx8IGZhbHNlO1xufVxuXG4vLyBQYXNzIHNwZWNpZmllZCBhcmd1bWVudHMgdGhyb3VnaCBhIG1lc3NhZ2UgaGFuZGxlciBvciBhcnJheSBvZiBtZXNzYWdlXG4vLyBoYW5kbGVycy5cbi8vXG4vLyBJZiBhIHJldHVybmVkL3lpZWxkZWQgdmFsdWUgaXM6XG4vLyAqIGEgbWVzc2FnZSBoYW5kbGVyIG9yIGFycmF5IG9mIG1lc3NhZ2UgaGFuZGxlcnM6IHVucm9sbCBpdC90aGVtIGlubGluZVxuLy8gKiBmYWxzZTogc2tpcCB0byB0aGUgdGhlIG5leHQgbWVzc2FnZSBoYW5kbGVyXG4vLyAqIGFueXRoaW5nIGVsc2U6IHN0b3AgaXRlcmF0aW9uIGFuZCB5aWVsZCB0aGF0IHZhbHVlXG4vL1xuLy8gSWYgaXRlcmF0aW9uIGNvbXBsZXRlcyBhbmQgbm8gbm9uLWZhbHNlIHZhbHVlIHdhcyByZXR1cm5lZC95aWVsZGVkLCB5aWVsZFxuLy8gZmFsc2UuXG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc01lc3NhZ2UoaGFuZGxlcnMsIC4uLmFyZ3MpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGhhbmRsZXJzKSkge1xuICAgIHJldHVybiBQcm9taXNlLnRyeSgoKSA9PiBjYWxsTWVzc2FnZUhhbmRsZXIoaGFuZGxlcnMsIC4uLmFyZ3MpKTtcbiAgfVxuICBjb25zdCB7bGVuZ3RofSA9IGhhbmRsZXJzO1xuICBsZXQgaSA9IDA7XG4gIGNvbnN0IG5leHQgPSBmID0+IFByb21pc2UudHJ5KGYpLnRoZW4ocmVzdWx0ID0+IHtcbiAgICBpZiAoaXNNZXNzYWdlSGFuZGxlck9ySGFuZGxlcnMocmVzdWx0KSkge1xuICAgICAgcmV0dXJuIG5leHQoKCkgPT4gcHJvY2Vzc01lc3NhZ2UocmVzdWx0LCAuLi5hcmdzKSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHJlc3VsdCAhPT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGVsc2UgaWYgKGkgPT09IGxlbmd0aCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gbmV4dCgoKSA9PiBwcm9jZXNzTWVzc2FnZShoYW5kbGVyc1tpKytdLCAuLi5hcmdzKSk7XG4gIH0pO1xuICByZXR1cm4gbmV4dCgoKSA9PiBmYWxzZSk7XG59XG4iXX0=
