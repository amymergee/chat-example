'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Bot = undefined;

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

exports.default = createBot;

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _botHelpers = require('./util/bot-helpers');

var _processMessage2 = require('./util/process-message');

var _response = require('./util/response');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Bot = exports.Bot = function () {
  function Bot() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    (0, _classCallCheck3.default)(this, Bot);
    var createMessageHandler = options.createMessageHandler,
        verbose = options.verbose;

    if (!createMessageHandler) {
      throw new TypeError('Missing required "createMessageHandler" option.');
    }
    this.createMessageHandler = createMessageHandler;
    // Log more?
    this.verbose = verbose;
    // Cache of message handlers.
    this.handlerCache = {};
    // Allow any of these options to override default Bot methods.
    (0, _botHelpers.overrideProperties)(this, options, ['formatErrorMessage', 'log', 'logError', 'onMessage', 'ignoreMessage', 'getMessageHandlerCacheId', 'getMessageHandler', 'getMessageHandlerArgs', 'handleResponse', 'handleError', 'sendResponse']);
  }

  // Expose the processMessage function on Bot instances for convenience.


  (0, _createClass3.default)(Bot, [{
    key: 'processMessage',
    value: function processMessage() {
      return _processMessage2.processMessage.apply(undefined, arguments);
    }

    // String formatting helper functions.

  }, {
    key: 'formatErrorMessage',
    value: function formatErrorMessage(message) {
      return 'An error occurred: ' + message;
    }

    // Overridable logger.

  }, {
    key: 'log',
    value: function log() {
      var _console;

      (_console = console).log.apply(_console, arguments);
    }

    // Overridable error logger.

  }, {
    key: 'logError',
    value: function logError() {
      var _console2;

      (_console2 = console).error.apply(_console2, arguments);
    }

    // This is main "run loop" for the bot. When a message is received, it gets
    // passed into this function to be handled.

  }, {
    key: 'onMessage',
    value: function onMessage(message) {
      var _this = this;

      return _bluebird2.default.try(function () {
        // Get the message text and an optional array of arguments based on the
        // current message. This is especially useful when "message" is an object,
        // and not a text string.
        var messageHandlerArgs = _this.getMessageHandlerArgs(message);
        // Abort if false was returned. This gives the getMessageHandlerArg
        // function the ability to pre-emptively ignore messages.
        if (messageHandlerArgs === false) {
          return [false];
        }
        var text = messageHandlerArgs.text,
            _messageHandlerArgs$a = messageHandlerArgs.args,
            args = _messageHandlerArgs$a === undefined ? [message] : _messageHandlerArgs$a;
        // Get the id to retrieve a stateful message handler from the cache.

        var id = _this.getMessageHandlerCacheId.apply(_this, (0, _toConsumableArray3.default)(args));
        // Get a cached message handler via its id, or call createMessageHandler
        // to create a new one.
        var messageHandler = _this.getMessageHandler.apply(_this, [id].concat((0, _toConsumableArray3.default)(args)));
        return [messageHandler, text, args];
      }).spread(function (messageHandler, text, args) {
        // If messageHandlerArgs or getMessageHandler returned false, abort.
        if (messageHandler === false) {
          return false;
        }
        // Process text and additional args through the message handler.
        return _this.processMessage.apply(_this, [messageHandler, text].concat((0, _toConsumableArray3.default)(args)))
        // Then handle the response.
        .then(function (response) {
          return _this.handleResponse(message, response);
        });
      })
      // If there was an error, handle that.
      .catch(function (error) {
        return _this.handleError(message, error);
      });
    }

    // Return an object that defines the message text and any additional arguments
    // to be passed into message handlers (and the getMessageHandlerCacheId and
    // getMessageHandler functions).
    //
    // This function receives the "message" value passed into onMessage.
    //
    // By default, Bot expect "message" to be an object with, at the minimum, a
    // "text" property. If your message is in a different format, override this
    // function. Eg. If messages are just strings of text, return {text: message}.

  }, {
    key: 'getMessageHandlerArgs',
    value: function getMessageHandlerArgs(message) {
      return {
        text: message.text,
        args: [message]
      };
    }

    // Return a value that will be used as an id to cache stateful message
    // handlers returned from the getMessageHandler function.
    //
    // This function receives the "args" returned from getMessageHandlerArgs.
    //
    // By default, Bot expects "message" to be an object with an "id" property. If
    // your message is in a different format, override this function.

  }, {
    key: 'getMessageHandlerCacheId',
    value: function getMessageHandlerCacheId(message) {
      return message && message.id;
    }

    // Return a message handler, either from cache (if it exists) or created by
    // the createMessageHandler function. If the message handler is stateful (ie.
    // has a true "hasState" property) store it in the cache for later retrieval.
    //
    // This function receives the "args" returned from getMessageHandlerArgs.

  }, {
    key: 'getMessageHandler',
    value: function getMessageHandler(id) {
      if (this.handlerCache[id]) {
        return this.handlerCache[id];
      }

      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      var messageHandler = this.createMessageHandler.apply(this, [id].concat(args));
      if (!messageHandler) {
        return false;
      }
      if (messageHandler.hasState) {
        this.handlerCache[id] = messageHandler;
      }
      return messageHandler;
    }

    // If a message handler didn't throw an exception and wasn't rejected, run
    // this function.
    //
    // This function receives the original "message" and "response" value returned
    // or yielded by the message handler. Normalize the response into an array
    // containing zero or more messages, and pass each to the sendResponse method,
    // in order.

  }, {
    key: 'handleResponse',
    value: function handleResponse(message, response) {
      var _this2 = this;

      if (response === false) {
        return false;
      }
      var responses = (0, _response.normalizeResponse)(response) || [];
      return _bluebird2.default.all(responses.map(function (text) {
        return _this2.sendResponse(message, text);
      }));
    }

    // If a message handler threw an exception or was otherwise rejected, run this
    // function.
    //
    // This function receives the original "message" and error object. Show the
    // error message in the same channel, group or DM from which the message
    // originated, and optionally log the error stack.

  }, {
    key: 'handleError',
    value: function handleError(message, error) {
      if (this.verbose) {
        this.logError(error.stack);
      }
      return this.sendResponse(message, this.formatErrorMessage(error.message));
    }

    // Once the response (successful or not) has been handled, this message does
    // the actual "sending" of the response back to the chat service. Which means
    // it needs to be overridden. If not, it will just log to the console.
    //
    // This function receives the original "message" and the normalized message
    // or formatted error message as the "text" value.
    //
    // If sending the response runs asynchronously, this function should return a
    // promise that is resolved when the response has been sent.

  }, {
    key: 'sendResponse',
    value: function sendResponse(message, text) {
      this.log('sendResponse', text);
    }
  }]);
  return Bot;
}();

function createBot(options) {
  return new Bot(options);
}
//# sourceMappingURL=data:application/json;base64,
