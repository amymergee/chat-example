'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SlackBot = undefined;

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

exports.default = createSlackBot;

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _bot = require('../bot');

var _botHelpers = require('../util/bot-helpers');

var _response = require('../util/response');

var _queue = require('../util/queue');

var _queue2 = _interopRequireDefault(_queue);

var _messageParser = require('./util/message-parser');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SlackBot = exports.SlackBot = function (_Bot) {
  (0, _inherits3.default)(SlackBot, _Bot);

  function SlackBot() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    (0, _classCallCheck3.default)(this, SlackBot);

    var _this = (0, _possibleConstructorReturn3.default)(this, (SlackBot.__proto__ || (0, _getPrototypeOf2.default)(SlackBot)).call(this, options));

    var slack = options.slack,
        getSlack = options.getSlack,
        _options$name = options.name,
        name = _options$name === undefined ? 'Chatter Bot' : _options$name,
        _options$icon = options.icon,
        icon = _options$icon === undefined ? 'https://static.bocoup.com/chatter/logo.png' : _options$icon,
        _options$eventNames = options.eventNames,
        eventNames = _options$eventNames === undefined ? ['open', 'error', 'message'] : _options$eventNames,
        _options$postMessageD = options.postMessageDelay,
        postMessageDelay = _options$postMessageD === undefined ? 250 : _options$postMessageD;

    if (!slack && !getSlack) {
      throw new TypeError('Missing required "slack" or "getSlack" option.');
    }
    // Bot name and icon.
    _this.name = name;
    _this.icon = icon;
    // Either specify a slack object or a function that will be used to get one.
    _this.slack = slack;
    _this.getSlack = getSlack;
    // Slack rtm client event names to bind to.
    _this.eventNames = eventNames;
    // Delay between messages sent via postMessage.
    _this.postMessageDelay = postMessageDelay;
    // Allow any of these options to override default Bot methods.
    (0, _botHelpers.overrideProperties)(_this, options, ['formatOnOpen', 'formatOnError', 'login', 'onOpen', 'onError', 'postMessageOptions', 'postMessageActual']);
    // Create per-channel queues of messages to be sent.
    _this.postMessageQueue = new _queue2.default({
      onDrain: _this.postMessageActual.bind(_this)
    });
    return _this;
  }

  // Provide a bound-to-this-slack wrapper around the parseMessage utility
  // function.


  (0, _createClass3.default)(SlackBot, [{
    key: 'parseMessage',
    value: function parseMessage() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _messageParser.parseMessage.apply(undefined, [this.slack].concat(args));
    }

    // String formatting helper functions.

  }, {
    key: 'formatErrorMessage',
    value: function formatErrorMessage(message) {
      return 'An error occurred: `' + message + '`';
    }
  }, {
    key: 'formatOnOpen',
    value: function formatOnOpen(_ref) {
      var user = _ref.user,
          team = _ref.team;
      return 'Connected to ' + team.name + ' as ' + user.name + '.';
    }
  }, {
    key: 'formatOnError',
    value: function formatOnError(args) {
      return this.name + ' error: ' + (0, _stringify2.default)(args);
    }

    // Return an object that defines the message text and an additional "meta"
    // argument containing a number of relevant properties, to be passed into
    // message handlers (and the getMessageHandlerCacheId and getMessageHandler
    // functions).
    //
    // This function receives a slack "message" object.

  }, {
    key: 'getMessageHandlerArgs',
    value: function getMessageHandlerArgs(message) {
      // Ignore bot messages.
      if (message.subtype === 'bot_message') {
        return false;
      }
      var origMessage = message;
      var channel = this.slack.rtmClient.dataStore.getChannelGroupOrDMById(message.channel);
      // Ignore non-message messages.
      if (message.type !== 'message') {
        return false;
      }
      // If the message was a "changed" message, get the underlying message.
      if (message.subtype === 'message_changed') {
        message = message.message;
      }
      // Ignore any message with a subtype or attachments.
      if (message.subtype || message.attachments) {
        return false;
      }
      var user = this.slack.rtmClient.dataStore.getUserById(message.user);
      var meta = {
        bot: this,
        slack: this.slack,
        message: message,
        origMessage: origMessage,
        channel: channel,
        user: user
      };
      return {
        text: message.text,
        args: [meta]
      };
    }

    // Return a value that will be used as an id to cache stateful message
    // handlers returned from the getMessageHandler function.
    //
    // This function receives the "meta" object from getMessageHandlerArgs. and
    // returns the message.channel property, which is the channel / group / DM id.

  }, {
    key: 'getMessageHandlerCacheId',
    value: function getMessageHandlerCacheId(meta) {
      return meta.message.channel;
    }

    // First, ensure the bot has a "slack" object, then bind event handlers and
    // start the bot.

  }, {
    key: 'login',
    value: function login() {
      if (!this.slack) {
        this.slack = this.getSlack();
        if (!this.slack || (0, _typeof3.default)(this.slack) !== 'object') {
          throw new TypeError('The "getSlack" function must return an object.');
        }
      }
      var slack = this.slack;
      if (!slack.rtmClient) {
        throw new TypeError('The "slack" object is missing a required "rtmClient" property.');
      } else if (!slack.rtmClient.dataStore) {
        throw new TypeError('The "slack" object is missing a required "rtmClient.dataStore" property.');
      } else if (!slack.webClient) {
        throw new TypeError('The "slack" object is missing a required "webClient" property.');
      }
      // Bind event handlers to the slack rtm client.
      this.bindEventHandlers(this.eventNames);
      // Start the rtm client!
      this.slack.rtmClient.start();
      // Make it chainable.
      return this;
    }

    // Bind whitelisted "foo"-type slack rtm events to "onFoo"-type bot methods.

  }, {
    key: 'bindEventHandlers',
    value: function bindEventHandlers(events) {
      var _this2 = this;

      events.forEach(function (name) {
        var method = _this2['on' + name[0].toUpperCase() + name.slice(1)];
        if (method) {
          _this2.slack.rtmClient.on(name, method.bind(_this2));
        }
      });
    }

    // When the slack rtm client connects, log a message.

  }, {
    key: 'onOpen',
    value: function onOpen() {
      var _slack$rtmClient = this.slack.rtmClient,
          dataStore = _slack$rtmClient.dataStore,
          activeUserId = _slack$rtmClient.activeUserId,
          activeTeamId = _slack$rtmClient.activeTeamId;

      var user = dataStore.getUserById(activeUserId);
      var team = dataStore.getTeamById(activeTeamId);
      this.log(this.formatOnOpen({ user: user, team: team }));
    }

    // If a slack error is encountered, log an error.

  }, {
    key: 'onError',
    value: function onError() {
      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      this.logError(this.formatOnError(args));
    }

    // After a message handler response has been normalized, send the response
    // text to the channel from where the message originated.

  }, {
    key: 'sendResponse',
    value: function sendResponse(message, text) {
      return this._postMessage(message.channel, text);
    }

    // Send an arbitrary message to an arbitrary slack channel, Returns a promise
    // that resolves after all queued messages for the given channelId have been
    // sent.
    // Usage:
    //   postMessage(channelId, message) // message will be normalized and passed into postMessageOptions
    //   postMessage(channelId, options) // options will be used instead of postMessageOptions

  }, {
    key: 'postMessage',
    value: function postMessage(channelId, options) {
      if ((0, _response.isMessage)(options)) {
        options = (0, _response.normalizeResponse)(options)[0];
      }
      return this._postMessage(channelId, options);
    }

    // For use internally. Doesn't call normalizeResponse since Bot#handleResponse
    // and SlackBot#postMessage will have already done that.

  }, {
    key: '_postMessage',
    value: function _postMessage(channelId, options) {
      if (typeof options === 'string') {
        options = this.postMessageOptions(options);
      }
      // Create a per-channelId queue of responses to be sent.
      return this.postMessageQueue.enqueue(channelId, options);
    }

    // Get postMessage options. See the slack API documentation for more info:
    // https://api.slack.com/methods/chat.postMessage

  }, {
    key: 'postMessageOptions',
    value: function postMessageOptions(text) {
      return {
        as_user: false,
        username: this.name,
        icon_url: this.icon,
        text: text,
        unfurl_links: false,
        unfurl_media: false
      };
    }

    // For each response, call the slack web client postMessage API and then
    // pause briefly. This prevents flooding and allows the bot's responses to
    // feel well-paced.

  }, {
    key: 'postMessageActual',
    value: function postMessageActual(channelId, options) {
      var _this3 = this;

      return this.slack.webClient.chat.postMessage(channelId, null, options).then(function () {
        return _bluebird2.default.delay(_this3.postMessageDelay);
      });
    }

    // Get the bot's name and a list of aliases suitable for use in a top-level
    // command message handler. If "isIm" is true, set "name" to null and add
    // the bot name to the list of aliases, so the bot will both respond to the
    // name (or any other aliases) but also to un-prefixed messages.

  }, {
    key: 'getBotNameAndAliases',
    value: function getBotNameAndAliases() {
      var isIm = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var _slack$rtmClient2 = this.slack.rtmClient,
          activeUserId = _slack$rtmClient2.activeUserId,
          dataStore = _slack$rtmClient2.dataStore;
      // Bot name.

      var name = dataStore.getUserById(activeUserId).name;
      // Aliases for a top-level bot command.
      var aliases = [name + ':', '<@' + activeUserId + '>', '<@' + activeUserId + '>:'];
      if (isIm) {
        aliases.unshift(name);
        name = null;
      }
      return { name: name, aliases: aliases };
    }
  }]);
  return SlackBot;
}(_bot.Bot);

function createSlackBot(options) {
  return new SlackBot(options);
}
//# sourceMappingURL=data:application/json;base64,
