'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseMessage = parseMessage;
// Parse message strings per https://api.slack.com/docs/formatting
// Turns a string like this:
//   Hello <@U03BS5P65>, channel is <#C025GMFDX> and URL is <http://foo.com/bar|foo.com/bar>
// Into this:
//   Hello @cowboy, channel is #general and URL is http://foo.com/bar
function parseMessage(slack) {
  var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

  var handlers = {
    '#': function _(id) {
      var _ref = slack.rtmClient.dataStore.getChannelById(id) || {},
          name = _ref.name;

      return name && '#' + name;
    },
    '@': function _(id) {
      var _ref2 = slack.rtmClient.dataStore.getUserById(id) || {},
          name = _ref2.name;

      return name && '@' + name;
    }
  };
  var firstPart = function firstPart(s) {
    return s.split('|')[0];
  };
  return message.replace(/<([^\s>]+)>/g, function (all, text) {
    var prefix = text[0];
    var handler = handlers[prefix];
    if (handler) {
      return handler(firstPart(text.slice(1)));
    }
    return firstPart(text);
  });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zbGFjay91dGlsL21lc3NhZ2UtcGFyc2VyLmpzIl0sIm5hbWVzIjpbInBhcnNlTWVzc2FnZSIsInNsYWNrIiwibWVzc2FnZSIsImhhbmRsZXJzIiwicnRtQ2xpZW50IiwiZGF0YVN0b3JlIiwiZ2V0Q2hhbm5lbEJ5SWQiLCJpZCIsIm5hbWUiLCJnZXRVc2VyQnlJZCIsImZpcnN0UGFydCIsInMiLCJzcGxpdCIsInJlcGxhY2UiLCJhbGwiLCJ0ZXh0IiwicHJlZml4IiwiaGFuZGxlciIsInNsaWNlIl0sIm1hcHBpbmdzIjoiOzs7OztRQUtnQkEsWSxHQUFBQSxZO0FBTGhCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxTQUFTQSxZQUFULENBQXNCQyxLQUF0QixFQUEyQztBQUFBLE1BQWRDLE9BQWMsdUVBQUosRUFBSTs7QUFDaEQsTUFBTUMsV0FBVztBQUNmLFNBQUssZUFBTTtBQUFBLGlCQUNNRixNQUFNRyxTQUFOLENBQWdCQyxTQUFoQixDQUEwQkMsY0FBMUIsQ0FBeUNDLEVBQXpDLEtBQWdELEVBRHREO0FBQUEsVUFDRkMsSUFERSxRQUNGQSxJQURFOztBQUVULGFBQU9BLGNBQVlBLElBQW5CO0FBQ0QsS0FKYztBQUtmLFNBQUssZUFBTTtBQUFBLGtCQUNNUCxNQUFNRyxTQUFOLENBQWdCQyxTQUFoQixDQUEwQkksV0FBMUIsQ0FBc0NGLEVBQXRDLEtBQTZDLEVBRG5EO0FBQUEsVUFDRkMsSUFERSxTQUNGQSxJQURFOztBQUVULGFBQU9BLGNBQVlBLElBQW5CO0FBQ0Q7QUFSYyxHQUFqQjtBQVVBLE1BQU1FLFlBQVksU0FBWkEsU0FBWTtBQUFBLFdBQUtDLEVBQUVDLEtBQUYsQ0FBUSxHQUFSLEVBQWEsQ0FBYixDQUFMO0FBQUEsR0FBbEI7QUFDQSxTQUFPVixRQUFRVyxPQUFSLENBQWdCLGNBQWhCLEVBQWdDLFVBQUNDLEdBQUQsRUFBTUMsSUFBTixFQUFlO0FBQ3BELFFBQU1DLFNBQVNELEtBQUssQ0FBTCxDQUFmO0FBQ0EsUUFBTUUsVUFBVWQsU0FBU2EsTUFBVCxDQUFoQjtBQUNBLFFBQUlDLE9BQUosRUFBYTtBQUNYLGFBQU9BLFFBQVFQLFVBQVVLLEtBQUtHLEtBQUwsQ0FBVyxDQUFYLENBQVYsQ0FBUixDQUFQO0FBQ0Q7QUFDRCxXQUFPUixVQUFVSyxJQUFWLENBQVA7QUFDRCxHQVBNLENBQVA7QUFRRCIsImZpbGUiOiJtZXNzYWdlLXBhcnNlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFBhcnNlIG1lc3NhZ2Ugc3RyaW5ncyBwZXIgaHR0cHM6Ly9hcGkuc2xhY2suY29tL2RvY3MvZm9ybWF0dGluZ1xuLy8gVHVybnMgYSBzdHJpbmcgbGlrZSB0aGlzOlxuLy8gICBIZWxsbyA8QFUwM0JTNVA2NT4sIGNoYW5uZWwgaXMgPCNDMDI1R01GRFg+IGFuZCBVUkwgaXMgPGh0dHA6Ly9mb28uY29tL2Jhcnxmb28uY29tL2Jhcj5cbi8vIEludG8gdGhpczpcbi8vICAgSGVsbG8gQGNvd2JveSwgY2hhbm5lbCBpcyAjZ2VuZXJhbCBhbmQgVVJMIGlzIGh0dHA6Ly9mb28uY29tL2JhclxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlTWVzc2FnZShzbGFjaywgbWVzc2FnZSA9ICcnKSB7XG4gIGNvbnN0IGhhbmRsZXJzID0ge1xuICAgICcjJzogaWQgPT4ge1xuICAgICAgY29uc3Qge25hbWV9ID0gc2xhY2sucnRtQ2xpZW50LmRhdGFTdG9yZS5nZXRDaGFubmVsQnlJZChpZCkgfHwge307XG4gICAgICByZXR1cm4gbmFtZSAmJiBgIyR7bmFtZX1gO1xuICAgIH0sXG4gICAgJ0AnOiBpZCA9PiB7XG4gICAgICBjb25zdCB7bmFtZX0gPSBzbGFjay5ydG1DbGllbnQuZGF0YVN0b3JlLmdldFVzZXJCeUlkKGlkKSB8fCB7fTtcbiAgICAgIHJldHVybiBuYW1lICYmIGBAJHtuYW1lfWA7XG4gICAgfSxcbiAgfTtcbiAgY29uc3QgZmlyc3RQYXJ0ID0gcyA9PiBzLnNwbGl0KCd8JylbMF07XG4gIHJldHVybiBtZXNzYWdlLnJlcGxhY2UoLzwoW15cXHM+XSspPi9nLCAoYWxsLCB0ZXh0KSA9PiB7XG4gICAgY29uc3QgcHJlZml4ID0gdGV4dFswXTtcbiAgICBjb25zdCBoYW5kbGVyID0gaGFuZGxlcnNbcHJlZml4XTtcbiAgICBpZiAoaGFuZGxlcikge1xuICAgICAgcmV0dXJuIGhhbmRsZXIoZmlyc3RQYXJ0KHRleHQuc2xpY2UoMSkpKTtcbiAgICB9XG4gICAgcmV0dXJuIGZpcnN0UGFydCh0ZXh0KTtcbiAgfSk7XG59XG4iXX0=
