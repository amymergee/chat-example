'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MatchingMessageHandler = undefined;

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _get3 = require('babel-runtime/helpers/get');

var _get4 = _interopRequireDefault(_get3);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _toArray2 = require('babel-runtime/helpers/toArray');

var _toArray3 = _interopRequireDefault(_toArray2);

exports.matchStringOrRegex = matchStringOrRegex;
exports.default = createMatcher;

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _delegate = require('./delegate');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Escape special characters that would cause errors if we interpolate them
// into a regex.
function regexEscape(expr) {
  return expr.replace(/[\\^$*+?.()|[\]{}]/g, '\\$&');
}

// If "match" is a String and matches the entire message or matches a space-
// delimited word at the beginning of the message, success. If any text
// remains after the match, return it (with leading spaces stripped) as the
// remainder.
//
// If match is a RegExp and matches the message, return the value of the
// first non-undefined (ie. captured) capture group.
function matchStringOrRegex(match) {
  var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

  var re = typeof match === 'string' ? new RegExp('^' + regexEscape(match) + '(?:$|\\s+(.*))', 'i') : match;

  var _ref = message.match(re) || [],
      _ref2 = (0, _toArray3.default)(_ref),
      fullMatch = _ref2[0],
      captures = _ref2.slice(1);

  if (typeof fullMatch !== 'string') {
    return false;
  }
  return captures.find(function (c) {
    return typeof c === 'string';
  }) || '';
}

var MatchingMessageHandler = exports.MatchingMessageHandler = function (_DelegatingMessageHan) {
  (0, _inherits3.default)(MatchingMessageHandler, _DelegatingMessageHan);

  function MatchingMessageHandler() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var children = arguments[1];
    (0, _classCallCheck3.default)(this, MatchingMessageHandler);

    var _this = (0, _possibleConstructorReturn3.default)(this, (MatchingMessageHandler.__proto__ || (0, _getPrototypeOf2.default)(MatchingMessageHandler)).call(this, options, children));

    if (!('match' in options)) {
      throw new TypeError('Missing required "match" option.');
    }
    _this.match = options.match;
    return _this;
  }

  // If match succeeds, pass remainder into child handlers, yielding their
  // result. If no match, yield false.


  (0, _createClass3.default)(MatchingMessageHandler, [{
    key: 'handleMessage',
    value: function handleMessage(message) {
      var _this2 = this;

      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      return _bluebird2.default.try(function () {
        return _this2.doMatch.apply(_this2, [message].concat(args));
      }).then(function (remainder) {
        var _get2;

        if (remainder === false) {
          return false;
        }
        return (_get2 = (0, _get4.default)(MatchingMessageHandler.prototype.__proto__ || (0, _getPrototypeOf2.default)(MatchingMessageHandler.prototype), 'handleMessage', _this2)).call.apply(_get2, [_this2, remainder].concat(args));
      });
    }

    // Attempt to match the message, given the "match" option.

  }, {
    key: 'doMatch',
    value: function doMatch(message) {
      var match = this.match;

      if (typeof match === 'function') {
        for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          args[_key2 - 1] = arguments[_key2];
        }

        return match.apply(undefined, [message].concat(args));
      } else if (typeof match === 'string' || match instanceof RegExp) {
        return matchStringOrRegex(match, message);
      }
      throw new TypeError('Invalid "match" option format.');
    }
  }]);
  return MatchingMessageHandler;
}(_delegate.DelegatingMessageHandler);

function createMatcher() {
  for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    args[_key3] = arguments[_key3];
  }

  return new (Function.prototype.bind.apply(MatchingMessageHandler, [null].concat(args)))();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tZXNzYWdlLWhhbmRsZXIvbWF0Y2hlci5qcyJdLCJuYW1lcyI6WyJtYXRjaFN0cmluZ09yUmVnZXgiLCJjcmVhdGVNYXRjaGVyIiwicmVnZXhFc2NhcGUiLCJleHByIiwicmVwbGFjZSIsIm1hdGNoIiwibWVzc2FnZSIsInJlIiwiUmVnRXhwIiwiZnVsbE1hdGNoIiwiY2FwdHVyZXMiLCJmaW5kIiwiYyIsIk1hdGNoaW5nTWVzc2FnZUhhbmRsZXIiLCJvcHRpb25zIiwiY2hpbGRyZW4iLCJUeXBlRXJyb3IiLCJhcmdzIiwidHJ5IiwiZG9NYXRjaCIsInRoZW4iLCJyZW1haW5kZXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1FBZ0JnQkEsa0IsR0FBQUEsa0I7a0JBNkNRQyxhOztBQTdEeEI7Ozs7QUFDQTs7OztBQUVBO0FBQ0E7QUFDQSxTQUFTQyxXQUFULENBQXFCQyxJQUFyQixFQUEyQjtBQUN6QixTQUFPQSxLQUFLQyxPQUFMLENBQWEscUJBQWIsRUFBb0MsTUFBcEMsQ0FBUDtBQUNEOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sU0FBU0osa0JBQVQsQ0FBNEJLLEtBQTVCLEVBQWlEO0FBQUEsTUFBZEMsT0FBYyx1RUFBSixFQUFJOztBQUN0RCxNQUFNQyxLQUFLLE9BQU9GLEtBQVAsS0FBaUIsUUFBakIsR0FBNEIsSUFBSUcsTUFBSixPQUFlTixZQUFZRyxLQUFaLENBQWYscUJBQW1ELEdBQW5ELENBQTVCLEdBQXNGQSxLQUFqRzs7QUFEc0QsYUFFckJDLFFBQVFELEtBQVIsQ0FBY0UsRUFBZCxLQUFxQixFQUZBO0FBQUE7QUFBQSxNQUUvQ0UsU0FGK0M7QUFBQSxNQUVqQ0MsUUFGaUM7O0FBR3RELE1BQUksT0FBT0QsU0FBUCxLQUFxQixRQUF6QixFQUFtQztBQUNqQyxXQUFPLEtBQVA7QUFDRDtBQUNELFNBQU9DLFNBQVNDLElBQVQsQ0FBYztBQUFBLFdBQUssT0FBT0MsQ0FBUCxLQUFhLFFBQWxCO0FBQUEsR0FBZCxLQUE2QyxFQUFwRDtBQUNEOztJQUVZQyxzQixXQUFBQSxzQjs7O0FBRVgsb0NBQW9DO0FBQUEsUUFBeEJDLE9BQXdCLHVFQUFkLEVBQWM7QUFBQSxRQUFWQyxRQUFVO0FBQUE7O0FBQUEsc0tBQzVCRCxPQUQ0QixFQUNuQkMsUUFEbUI7O0FBRWxDLFFBQUksRUFBRSxXQUFXRCxPQUFiLENBQUosRUFBMkI7QUFDekIsWUFBTSxJQUFJRSxTQUFKLENBQWMsa0NBQWQsQ0FBTjtBQUNEO0FBQ0QsVUFBS1gsS0FBTCxHQUFhUyxRQUFRVCxLQUFyQjtBQUxrQztBQU1uQzs7QUFFRDtBQUNBOzs7OztrQ0FDY0MsTyxFQUFrQjtBQUFBOztBQUFBLHdDQUFOVyxJQUFNO0FBQU5BLFlBQU07QUFBQTs7QUFDOUIsYUFBTyxtQkFBUUMsR0FBUixDQUFZO0FBQUEsZUFBTSxPQUFLQyxPQUFMLGdCQUFhYixPQUFiLFNBQXlCVyxJQUF6QixFQUFOO0FBQUEsT0FBWixFQUNORyxJQURNLENBQ0QscUJBQWE7QUFBQTs7QUFDakIsWUFBSUMsY0FBYyxLQUFsQixFQUF5QjtBQUN2QixpQkFBTyxLQUFQO0FBQ0Q7QUFDRCwrTUFBMkJBLFNBQTNCLFNBQXlDSixJQUF6QztBQUNELE9BTk0sQ0FBUDtBQU9EOztBQUVEOzs7OzRCQUNRWCxPLEVBQWtCO0FBQUEsVUFDakJELEtBRGlCLEdBQ1IsSUFEUSxDQUNqQkEsS0FEaUI7O0FBRXhCLFVBQUksT0FBT0EsS0FBUCxLQUFpQixVQUFyQixFQUFpQztBQUFBLDJDQUZmWSxJQUVlO0FBRmZBLGNBRWU7QUFBQTs7QUFDL0IsZUFBT1osd0JBQU1DLE9BQU4sU0FBa0JXLElBQWxCLEVBQVA7QUFDRCxPQUZELE1BR0ssSUFBSSxPQUFPWixLQUFQLEtBQWlCLFFBQWpCLElBQTZCQSxpQkFBaUJHLE1BQWxELEVBQTBEO0FBQzdELGVBQU9SLG1CQUFtQkssS0FBbkIsRUFBMEJDLE9BQTFCLENBQVA7QUFDRDtBQUNELFlBQU0sSUFBSVUsU0FBSixDQUFjLGdDQUFkLENBQU47QUFDRDs7Ozs7QUFJWSxTQUFTZixhQUFULEdBQWdDO0FBQUEscUNBQU5nQixJQUFNO0FBQU5BLFFBQU07QUFBQTs7QUFDN0MsNENBQVdKLHNCQUFYLGdCQUFxQ0ksSUFBckM7QUFDRCIsImZpbGUiOiJtYXRjaGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFByb21pc2UgZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IHtEZWxlZ2F0aW5nTWVzc2FnZUhhbmRsZXJ9IGZyb20gJy4vZGVsZWdhdGUnO1xuXG4vLyBFc2NhcGUgc3BlY2lhbCBjaGFyYWN0ZXJzIHRoYXQgd291bGQgY2F1c2UgZXJyb3JzIGlmIHdlIGludGVycG9sYXRlIHRoZW1cbi8vIGludG8gYSByZWdleC5cbmZ1bmN0aW9uIHJlZ2V4RXNjYXBlKGV4cHIpIHtcbiAgcmV0dXJuIGV4cHIucmVwbGFjZSgvW1xcXFxeJCorPy4oKXxbXFxde31dL2csICdcXFxcJCYnKTtcbn1cblxuLy8gSWYgXCJtYXRjaFwiIGlzIGEgU3RyaW5nIGFuZCBtYXRjaGVzIHRoZSBlbnRpcmUgbWVzc2FnZSBvciBtYXRjaGVzIGEgc3BhY2UtXG4vLyBkZWxpbWl0ZWQgd29yZCBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBtZXNzYWdlLCBzdWNjZXNzLiBJZiBhbnkgdGV4dFxuLy8gcmVtYWlucyBhZnRlciB0aGUgbWF0Y2gsIHJldHVybiBpdCAod2l0aCBsZWFkaW5nIHNwYWNlcyBzdHJpcHBlZCkgYXMgdGhlXG4vLyByZW1haW5kZXIuXG4vL1xuLy8gSWYgbWF0Y2ggaXMgYSBSZWdFeHAgYW5kIG1hdGNoZXMgdGhlIG1lc3NhZ2UsIHJldHVybiB0aGUgdmFsdWUgb2YgdGhlXG4vLyBmaXJzdCBub24tdW5kZWZpbmVkIChpZS4gY2FwdHVyZWQpIGNhcHR1cmUgZ3JvdXAuXG5leHBvcnQgZnVuY3Rpb24gbWF0Y2hTdHJpbmdPclJlZ2V4KG1hdGNoLCBtZXNzYWdlID0gJycpIHtcbiAgY29uc3QgcmUgPSB0eXBlb2YgbWF0Y2ggPT09ICdzdHJpbmcnID8gbmV3IFJlZ0V4cChgXiR7cmVnZXhFc2NhcGUobWF0Y2gpfSg/OiR8XFxcXHMrKC4qKSlgLCAnaScpIDogbWF0Y2g7XG4gIGNvbnN0IFtmdWxsTWF0Y2gsIC4uLmNhcHR1cmVzXSA9IG1lc3NhZ2UubWF0Y2gocmUpIHx8IFtdO1xuICBpZiAodHlwZW9mIGZ1bGxNYXRjaCAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIGNhcHR1cmVzLmZpbmQoYyA9PiB0eXBlb2YgYyA9PT0gJ3N0cmluZycpIHx8ICcnO1xufVxuXG5leHBvcnQgY2xhc3MgTWF0Y2hpbmdNZXNzYWdlSGFuZGxlciBleHRlbmRzIERlbGVnYXRpbmdNZXNzYWdlSGFuZGxlciB7XG5cbiAgY29uc3RydWN0b3Iob3B0aW9ucyA9IHt9LCBjaGlsZHJlbikge1xuICAgIHN1cGVyKG9wdGlvbnMsIGNoaWxkcmVuKTtcbiAgICBpZiAoISgnbWF0Y2gnIGluIG9wdGlvbnMpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdNaXNzaW5nIHJlcXVpcmVkIFwibWF0Y2hcIiBvcHRpb24uJyk7XG4gICAgfVxuICAgIHRoaXMubWF0Y2ggPSBvcHRpb25zLm1hdGNoO1xuICB9XG5cbiAgLy8gSWYgbWF0Y2ggc3VjY2VlZHMsIHBhc3MgcmVtYWluZGVyIGludG8gY2hpbGQgaGFuZGxlcnMsIHlpZWxkaW5nIHRoZWlyXG4gIC8vIHJlc3VsdC4gSWYgbm8gbWF0Y2gsIHlpZWxkIGZhbHNlLlxuICBoYW5kbGVNZXNzYWdlKG1lc3NhZ2UsIC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gUHJvbWlzZS50cnkoKCkgPT4gdGhpcy5kb01hdGNoKG1lc3NhZ2UsIC4uLmFyZ3MpKVxuICAgIC50aGVuKHJlbWFpbmRlciA9PiB7XG4gICAgICBpZiAocmVtYWluZGVyID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3VwZXIuaGFuZGxlTWVzc2FnZShyZW1haW5kZXIsIC4uLmFyZ3MpO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gQXR0ZW1wdCB0byBtYXRjaCB0aGUgbWVzc2FnZSwgZ2l2ZW4gdGhlIFwibWF0Y2hcIiBvcHRpb24uXG4gIGRvTWF0Y2gobWVzc2FnZSwgLi4uYXJncykge1xuICAgIGNvbnN0IHttYXRjaH0gPSB0aGlzO1xuICAgIGlmICh0eXBlb2YgbWF0Y2ggPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBtYXRjaChtZXNzYWdlLCAuLi5hcmdzKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIG1hdGNoID09PSAnc3RyaW5nJyB8fCBtYXRjaCBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgcmV0dXJuIG1hdGNoU3RyaW5nT3JSZWdleChtYXRjaCwgbWVzc2FnZSk7XG4gICAgfVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgXCJtYXRjaFwiIG9wdGlvbiBmb3JtYXQuJyk7XG4gIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVNYXRjaGVyKC4uLmFyZ3MpIHtcbiAgcmV0dXJuIG5ldyBNYXRjaGluZ01lc3NhZ2VIYW5kbGVyKC4uLmFyZ3MpO1xufVxuIl19
