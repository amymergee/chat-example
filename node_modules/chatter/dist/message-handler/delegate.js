'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DelegatingMessageHandler = undefined;

var _toArray2 = require('babel-runtime/helpers/toArray');

var _toArray3 = _interopRequireDefault(_toArray2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

exports.getHandlers = getHandlers;
exports.default = createDelegate;
exports.composeCreators = composeCreators;

var _processMessage = require('../util/process-message');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Validate these signatures.
// Only options:
//   getHandlers({handleMessage: fn, ...})
// Only children:
//   getHandlers(fn)
//   getHandlers({handleMessage: fn})
//   getHandlers([...])
// Both options and children:
//   getHandlers({...}, fn)
//   getHandlers({...}, {handleMessage: fn})
//   getHandlers({...}, [...])
function getHandlers() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var handlers = arguments[1];

  if (!handlers) {
    handlers = options.handleMessage || options;
  }
  if (!(0, _processMessage.isMessageHandlerOrHandlers)(handlers)) {
    throw new TypeError('Missing required message handler(s).');
  }
  return handlers;
}

var DelegatingMessageHandler = exports.DelegatingMessageHandler = function () {
  function DelegatingMessageHandler(options, children) {
    (0, _classCallCheck3.default)(this, DelegatingMessageHandler);

    this.children = getHandlers(options, children);
  }

  // Iterate over all child handlers, yielding the first non-false result.


  (0, _createClass3.default)(DelegatingMessageHandler, [{
    key: 'handleMessage',
    value: function handleMessage(message) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      return _processMessage.processMessage.apply(undefined, [this.children, message].concat(args));
    }
  }]);
  return DelegatingMessageHandler;
}();

function createDelegate() {
  for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }

  return new (Function.prototype.bind.apply(DelegatingMessageHandler, [null].concat(args)))();
}

// Compose creators that accept a signature like getHandlers() into a single
// creator. All creators receive the same options object.
// Eg:
//   const createMatcherParser = composeCreators(createMatcher, createParser);
//   const fooHandler = createMatcherParser({match: 'foo', parseOptions: {}}, fn);
// Is equivalent to:
//   const fooHandler = createMatcher({match: 'foo'}, createParser({parseOptions: {}}, fn));
function composeCreators() {
  for (var _len3 = arguments.length, creators = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    creators[_key3] = arguments[_key3];
  }

  if (Array.isArray(creators[0])) {
    creators = creators[0];
  }
  return function composed(options, children) {
    children = getHandlers(options, children);
    function recurse(_ref) {
      var _ref2 = (0, _toArray3.default)(_ref),
          currentHandler = _ref2[0],
          remain = _ref2.slice(1);

      var nextHandler = remain.length > 0 ? recurse(remain) : createDelegate(children);
      return currentHandler(options, nextHandler);
    }
    return recurse(creators);
  };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tZXNzYWdlLWhhbmRsZXIvZGVsZWdhdGUuanMiXSwibmFtZXMiOlsiZ2V0SGFuZGxlcnMiLCJjcmVhdGVEZWxlZ2F0ZSIsImNvbXBvc2VDcmVhdG9ycyIsIm9wdGlvbnMiLCJoYW5kbGVycyIsImhhbmRsZU1lc3NhZ2UiLCJUeXBlRXJyb3IiLCJEZWxlZ2F0aW5nTWVzc2FnZUhhbmRsZXIiLCJjaGlsZHJlbiIsIm1lc3NhZ2UiLCJhcmdzIiwiY3JlYXRvcnMiLCJBcnJheSIsImlzQXJyYXkiLCJjb21wb3NlZCIsInJlY3Vyc2UiLCJjdXJyZW50SGFuZGxlciIsInJlbWFpbiIsIm5leHRIYW5kbGVyIiwibGVuZ3RoIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O1FBYWdCQSxXLEdBQUFBLFc7a0JBdUJRQyxjO1FBV1JDLGUsR0FBQUEsZTs7QUEvQ2hCOzs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLFNBQVNGLFdBQVQsR0FBNkM7QUFBQSxNQUF4QkcsT0FBd0IsdUVBQWQsRUFBYztBQUFBLE1BQVZDLFFBQVU7O0FBQ2xELE1BQUksQ0FBQ0EsUUFBTCxFQUFlO0FBQ2JBLGVBQVdELFFBQVFFLGFBQVIsSUFBeUJGLE9BQXBDO0FBQ0Q7QUFDRCxNQUFJLENBQUMsZ0RBQTJCQyxRQUEzQixDQUFMLEVBQTJDO0FBQ3pDLFVBQU0sSUFBSUUsU0FBSixDQUFjLHNDQUFkLENBQU47QUFDRDtBQUNELFNBQU9GLFFBQVA7QUFDRDs7SUFFWUcsd0IsV0FBQUEsd0I7QUFFWCxvQ0FBWUosT0FBWixFQUFxQkssUUFBckIsRUFBK0I7QUFBQTs7QUFDN0IsU0FBS0EsUUFBTCxHQUFnQlIsWUFBWUcsT0FBWixFQUFxQkssUUFBckIsQ0FBaEI7QUFDRDs7QUFFRDs7Ozs7a0NBQ2NDLE8sRUFBa0I7QUFBQSx3Q0FBTkMsSUFBTTtBQUFOQSxZQUFNO0FBQUE7O0FBQzlCLGFBQU8saURBQWUsS0FBS0YsUUFBcEIsRUFBOEJDLE9BQTlCLFNBQTBDQyxJQUExQyxFQUFQO0FBQ0Q7Ozs7O0FBSVksU0FBU1QsY0FBVCxHQUFpQztBQUFBLHFDQUFOUyxJQUFNO0FBQU5BLFFBQU07QUFBQTs7QUFDOUMsNENBQVdILHdCQUFYLGdCQUF1Q0csSUFBdkM7QUFDRDs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLFNBQVNSLGVBQVQsR0FBc0M7QUFBQSxxQ0FBVlMsUUFBVTtBQUFWQSxZQUFVO0FBQUE7O0FBQzNDLE1BQUlDLE1BQU1DLE9BQU4sQ0FBY0YsU0FBUyxDQUFULENBQWQsQ0FBSixFQUFnQztBQUM5QkEsZUFBV0EsU0FBUyxDQUFULENBQVg7QUFDRDtBQUNELFNBQU8sU0FBU0csUUFBVCxDQUFrQlgsT0FBbEIsRUFBMkJLLFFBQTNCLEVBQXFDO0FBQzFDQSxlQUFXUixZQUFZRyxPQUFaLEVBQXFCSyxRQUFyQixDQUFYO0FBQ0EsYUFBU08sT0FBVCxPQUE4QztBQUFBO0FBQUEsVUFBNUJDLGNBQTRCO0FBQUEsVUFBVEMsTUFBUzs7QUFDNUMsVUFBTUMsY0FBY0QsT0FBT0UsTUFBUCxHQUFnQixDQUFoQixHQUFvQkosUUFBUUUsTUFBUixDQUFwQixHQUFzQ2hCLGVBQWVPLFFBQWYsQ0FBMUQ7QUFDQSxhQUFPUSxlQUFlYixPQUFmLEVBQXdCZSxXQUF4QixDQUFQO0FBQ0Q7QUFDRCxXQUFPSCxRQUFRSixRQUFSLENBQVA7QUFDRCxHQVBEO0FBUUQiLCJmaWxlIjoiZGVsZWdhdGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge3Byb2Nlc3NNZXNzYWdlLCBpc01lc3NhZ2VIYW5kbGVyT3JIYW5kbGVyc30gZnJvbSAnLi4vdXRpbC9wcm9jZXNzLW1lc3NhZ2UnO1xuXG4vLyBWYWxpZGF0ZSB0aGVzZSBzaWduYXR1cmVzLlxuLy8gT25seSBvcHRpb25zOlxuLy8gICBnZXRIYW5kbGVycyh7aGFuZGxlTWVzc2FnZTogZm4sIC4uLn0pXG4vLyBPbmx5IGNoaWxkcmVuOlxuLy8gICBnZXRIYW5kbGVycyhmbilcbi8vICAgZ2V0SGFuZGxlcnMoe2hhbmRsZU1lc3NhZ2U6IGZufSlcbi8vICAgZ2V0SGFuZGxlcnMoWy4uLl0pXG4vLyBCb3RoIG9wdGlvbnMgYW5kIGNoaWxkcmVuOlxuLy8gICBnZXRIYW5kbGVycyh7Li4ufSwgZm4pXG4vLyAgIGdldEhhbmRsZXJzKHsuLi59LCB7aGFuZGxlTWVzc2FnZTogZm59KVxuLy8gICBnZXRIYW5kbGVycyh7Li4ufSwgWy4uLl0pXG5leHBvcnQgZnVuY3Rpb24gZ2V0SGFuZGxlcnMob3B0aW9ucyA9IHt9LCBoYW5kbGVycykge1xuICBpZiAoIWhhbmRsZXJzKSB7XG4gICAgaGFuZGxlcnMgPSBvcHRpb25zLmhhbmRsZU1lc3NhZ2UgfHwgb3B0aW9ucztcbiAgfVxuICBpZiAoIWlzTWVzc2FnZUhhbmRsZXJPckhhbmRsZXJzKGhhbmRsZXJzKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ01pc3NpbmcgcmVxdWlyZWQgbWVzc2FnZSBoYW5kbGVyKHMpLicpO1xuICB9XG4gIHJldHVybiBoYW5kbGVycztcbn1cblxuZXhwb3J0IGNsYXNzIERlbGVnYXRpbmdNZXNzYWdlSGFuZGxlciB7XG5cbiAgY29uc3RydWN0b3Iob3B0aW9ucywgY2hpbGRyZW4pIHtcbiAgICB0aGlzLmNoaWxkcmVuID0gZ2V0SGFuZGxlcnMob3B0aW9ucywgY2hpbGRyZW4pO1xuICB9XG5cbiAgLy8gSXRlcmF0ZSBvdmVyIGFsbCBjaGlsZCBoYW5kbGVycywgeWllbGRpbmcgdGhlIGZpcnN0IG5vbi1mYWxzZSByZXN1bHQuXG4gIGhhbmRsZU1lc3NhZ2UobWVzc2FnZSwgLi4uYXJncykge1xuICAgIHJldHVybiBwcm9jZXNzTWVzc2FnZSh0aGlzLmNoaWxkcmVuLCBtZXNzYWdlLCAuLi5hcmdzKTtcbiAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZURlbGVnYXRlKC4uLmFyZ3MpIHtcbiAgcmV0dXJuIG5ldyBEZWxlZ2F0aW5nTWVzc2FnZUhhbmRsZXIoLi4uYXJncyk7XG59XG5cbi8vIENvbXBvc2UgY3JlYXRvcnMgdGhhdCBhY2NlcHQgYSBzaWduYXR1cmUgbGlrZSBnZXRIYW5kbGVycygpIGludG8gYSBzaW5nbGVcbi8vIGNyZWF0b3IuIEFsbCBjcmVhdG9ycyByZWNlaXZlIHRoZSBzYW1lIG9wdGlvbnMgb2JqZWN0LlxuLy8gRWc6XG4vLyAgIGNvbnN0IGNyZWF0ZU1hdGNoZXJQYXJzZXIgPSBjb21wb3NlQ3JlYXRvcnMoY3JlYXRlTWF0Y2hlciwgY3JlYXRlUGFyc2VyKTtcbi8vICAgY29uc3QgZm9vSGFuZGxlciA9IGNyZWF0ZU1hdGNoZXJQYXJzZXIoe21hdGNoOiAnZm9vJywgcGFyc2VPcHRpb25zOiB7fX0sIGZuKTtcbi8vIElzIGVxdWl2YWxlbnQgdG86XG4vLyAgIGNvbnN0IGZvb0hhbmRsZXIgPSBjcmVhdGVNYXRjaGVyKHttYXRjaDogJ2Zvbyd9LCBjcmVhdGVQYXJzZXIoe3BhcnNlT3B0aW9uczoge319LCBmbikpO1xuZXhwb3J0IGZ1bmN0aW9uIGNvbXBvc2VDcmVhdG9ycyguLi5jcmVhdG9ycykge1xuICBpZiAoQXJyYXkuaXNBcnJheShjcmVhdG9yc1swXSkpIHtcbiAgICBjcmVhdG9ycyA9IGNyZWF0b3JzWzBdO1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiBjb21wb3NlZChvcHRpb25zLCBjaGlsZHJlbikge1xuICAgIGNoaWxkcmVuID0gZ2V0SGFuZGxlcnMob3B0aW9ucywgY2hpbGRyZW4pO1xuICAgIGZ1bmN0aW9uIHJlY3Vyc2UoW2N1cnJlbnRIYW5kbGVyLCAuLi5yZW1haW5dKSB7XG4gICAgICBjb25zdCBuZXh0SGFuZGxlciA9IHJlbWFpbi5sZW5ndGggPiAwID8gcmVjdXJzZShyZW1haW4pIDogY3JlYXRlRGVsZWdhdGUoY2hpbGRyZW4pO1xuICAgICAgcmV0dXJuIGN1cnJlbnRIYW5kbGVyKG9wdGlvbnMsIG5leHRIYW5kbGVyKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlY3Vyc2UoY3JlYXRvcnMpO1xuICB9O1xufVxuIl19
