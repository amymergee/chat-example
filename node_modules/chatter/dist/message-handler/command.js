'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CommandMessageHandler = undefined;

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

exports.default = createCommand;

var _delegate = require('./delegate');

var _matcher = require('./matcher');

var _matcher2 = _interopRequireDefault(_matcher);

var _parser = require('./parser');

var _parser2 = _interopRequireDefault(_parser);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function formatCommand() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  // console.log(`formatCommand <${args.join('> <')}>`);
  return args.filter(Boolean).join(' ');
}

var CommandMessageHandler = exports.CommandMessageHandler = function (_DelegatingMessageHan) {
  (0, _inherits3.default)(CommandMessageHandler, _DelegatingMessageHan);

  function CommandMessageHandler() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var children = arguments[1];
    (0, _classCallCheck3.default)(this, CommandMessageHandler);

    var _this = (0, _possibleConstructorReturn3.default)(this, (CommandMessageHandler.__proto__ || (0, _getPrototypeOf2.default)(CommandMessageHandler)).call(this, options, children));

    var name = options.name,
        aliases = options.aliases,
        usage = options.usage,
        description = options.description,
        details = options.details,
        isParent = options.isParent;

    _this.isCommand = true;
    _this.name = name;
    _this.usage = usage;
    _this.description = description;
    _this.details = details;
    _this.isParent = isParent;
    // Ensure children is an array.
    if (!Array.isArray(_this.children)) {
      _this.children = [_this.children];
    }
    // If this command has no name, it's the "top-level" command. Add a help
    // command and a fallback handler for usage information.
    if (isParent) {
      _this.children = [].concat((0, _toConsumableArray3.default)(_this.children), [_this.createHelpCommand(), _this.createFallbackHandler()]);
    }
    // Keep track of this command's sub-commands for later use.
    _this.subCommands = _this.children.filter(function (c) {
      return c.isCommand;
    });
    // If this command has a name or aliases, create a matching wrapper around
    // children that responds only to that name or an alias.
    if (name || aliases) {
      (function () {
        var items = !aliases ? [] : Array.isArray(aliases) ? aliases : [aliases];
        if (name) {
          items.unshift(name);
        }
        var origChildren = _this.children;
        _this.children = items.map(function (item) {
          return (0, _matcher2.default)({ match: item }, origChildren);
        });
        if (!name) {
          _this.children.push(origChildren);
        }
      })();
    }
    return _this;
  }

  // Does this command have sub-commands?


  (0, _createClass3.default)(CommandMessageHandler, [{
    key: 'hasSubCommands',
    value: function hasSubCommands() {
      return this.subCommands.length > 0;
    }

    // Search for a matching sub-command. If an exact match isn't found, return
    // the closest matching parent command. Returns the matched command, the full
    // name (ie. path) to that command, and whether or not it was an exact match.

  }, {
    key: 'getMatchingSubCommand',
    value: function getMatchingSubCommand(search) {
      var command = this; // eslint-disable-line consistent-this
      var exact = true;
      var prefix = this.isParent ? this.name : '';
      var subCommandNameParts = [];
      if (search) {
        (function () {
          var parts = search.split(/\s+/);

          var _loop = function _loop(_i) {
            var subCommand = command.subCommands.find(function (_ref) {
              var name = _ref.name;

              if (name) {
                // Handle spaces in command names.
                for (var j = _i; j < parts.length; j++) {
                  if (parts.slice(_i, j + 1).join(' ') === name) {
                    _i = j;
                    return true;
                  }
                }
              }
              return false;
            });
            if (!subCommand) {
              exact = false;
              return 'break';
            }
            command = subCommand;
            subCommandNameParts.push(command.name);
            i = _i;
          };

          for (var i = 0; i < parts.length; i++) {
            var _ret3 = _loop(i);

            if (_ret3 === 'break') break;
          }
        })();
      }
      return {
        command: command,
        prefix: prefix,
        exact: exact,
        subCommandName: subCommandNameParts.join(' ')
      };
    }

    // Display usage info for this command, given the specified command name.

  }, {
    key: 'getUsage',
    value: function getUsage(command, prefix) {
      if (!this.name) {
        return false;
      }
      command = formatCommand(prefix, command);
      var usageFormatter = function usageFormatter(details) {
        return formatCommand(command, details);
      };
      // If usage is a function, pass the command to it.
      var usage = typeof this.usage === 'function' ? this.usage(command) :
      // If usage is a string, format it.
      this.usage ? usageFormatter(this.usage) :
      // If usage isn't specified, but the command has sub-commands, format it.
      this.hasSubCommands() ? usageFormatter('<command>') :
      // Otherwise just return the command,
      command;
      return 'Usage: `' + usage + '`';
    }

    // Get help info for this command, given the specified arguments.

  }, {
    key: 'helpInfo',
    value: function helpInfo(search, command, prefix, exact) {
      var helpText = command ? ' for *' + formatCommand(prefix, command) + '*' : prefix ? ' for *' + prefix + '*' : '';
      return [!exact && '_Unknown command *' + formatCommand(prefix, search) + '*, showing help' + helpText + '._', this.description, this.getUsage(command, prefix), this.hasSubCommands() && '*Commands:*', this.subCommands.map(function (c) {
        return '> *' + c.name + '* - ' + c.description;
      }), this.details];
    }

    // Create a top-level "help" command handler that displays help for the
    // closest matching command to what was specified.

  }, {
    key: 'createHelpCommand',
    value: function createHelpCommand() {
      var _this2 = this;

      return createCommand({ // eslint-disable-line no-use-before-define
        name: 'help',
        description: 'Get help for the specified command.',
        usage: '<command>',
        handleMessage: (0, _parser2.default)(function (_ref2) {
          var args = _ref2.args;

          var search = args.join(' ');

          var _getMatchingSubComman = _this2.getMatchingSubCommand(search),
              command = _getMatchingSubComman.command,
              subCommandName = _getMatchingSubComman.subCommandName,
              prefix = _getMatchingSubComman.prefix,
              exact = _getMatchingSubComman.exact;

          return command.helpInfo(search, subCommandName, prefix, exact);
        })
      });
    }

    // Get usage info for this command, given the specified arguments.

  }, {
    key: 'usageInfo',
    value: function usageInfo(message, command, prefix) {
      var isMatch = !message || Boolean(command);
      var usage = isMatch && this.getUsage(command, prefix);
      var help = command = formatCommand(prefix, 'help', command);
      return [!isMatch && 'Unknown command *' + formatCommand(prefix, message) + '*.', usage, (usage ? 'Or try' : 'Try') + ' *' + help + '* for more information.'];
    }

    // Create a top-level "fallback" handler that displays usage info for the
    // closest matching command to what was specified. This handler only runs if
    // every other handler returns false. Ie. no other command matched.

  }, {
    key: 'createFallbackHandler',
    value: function createFallbackHandler() {
      var _this3 = this;

      return function (message) {
        var _getMatchingSubComman2 = _this3.getMatchingSubCommand(message),
            command = _getMatchingSubComman2.command,
            subCommandName = _getMatchingSubComman2.subCommandName,
            prefix = _getMatchingSubComman2.prefix;

        return command.usageInfo(message, subCommandName, prefix);
      };
    }
  }]);
  return CommandMessageHandler;
}(_delegate.DelegatingMessageHandler);

function createCommand() {
  for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }

  return new (Function.prototype.bind.apply(CommandMessageHandler, [null].concat(args)))();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tZXNzYWdlLWhhbmRsZXIvY29tbWFuZC5qcyJdLCJuYW1lcyI6WyJjcmVhdGVDb21tYW5kIiwiZm9ybWF0Q29tbWFuZCIsImFyZ3MiLCJmaWx0ZXIiLCJCb29sZWFuIiwiam9pbiIsIkNvbW1hbmRNZXNzYWdlSGFuZGxlciIsIm9wdGlvbnMiLCJjaGlsZHJlbiIsIm5hbWUiLCJhbGlhc2VzIiwidXNhZ2UiLCJkZXNjcmlwdGlvbiIsImRldGFpbHMiLCJpc1BhcmVudCIsImlzQ29tbWFuZCIsIkFycmF5IiwiaXNBcnJheSIsImNyZWF0ZUhlbHBDb21tYW5kIiwiY3JlYXRlRmFsbGJhY2tIYW5kbGVyIiwic3ViQ29tbWFuZHMiLCJjIiwiaXRlbXMiLCJ1bnNoaWZ0Iiwib3JpZ0NoaWxkcmVuIiwibWFwIiwibWF0Y2giLCJpdGVtIiwicHVzaCIsImxlbmd0aCIsInNlYXJjaCIsImNvbW1hbmQiLCJleGFjdCIsInByZWZpeCIsInN1YkNvbW1hbmROYW1lUGFydHMiLCJwYXJ0cyIsInNwbGl0Iiwic3ViQ29tbWFuZCIsImZpbmQiLCJqIiwiaSIsInNsaWNlIiwic3ViQ29tbWFuZE5hbWUiLCJ1c2FnZUZvcm1hdHRlciIsImhhc1N1YkNvbW1hbmRzIiwiaGVscFRleHQiLCJnZXRVc2FnZSIsImhhbmRsZU1lc3NhZ2UiLCJnZXRNYXRjaGluZ1N1YkNvbW1hbmQiLCJoZWxwSW5mbyIsIm1lc3NhZ2UiLCJpc01hdGNoIiwiaGVscCIsInVzYWdlSW5mbyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztrQkFvS3dCQSxhOztBQXBLeEI7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBRUEsU0FBU0MsYUFBVCxHQUFnQztBQUFBLG9DQUFOQyxJQUFNO0FBQU5BLFFBQU07QUFBQTs7QUFDOUI7QUFDQSxTQUFPQSxLQUFLQyxNQUFMLENBQVlDLE9BQVosRUFBcUJDLElBQXJCLENBQTBCLEdBQTFCLENBQVA7QUFDRDs7SUFFWUMscUIs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akIsRUFBeUJZLGNBQXpCLEVBQXlDVCxNQUF6QyxFQUFpREQsS0FBakQsQ0FBUDtBQUNELFNBSmM7QUFKSSxPQUFkLENBQVA7QUFVRDs7QUFFRDs7Ozs4QkFDVWtCLE8sRUFBU25CLE8sRUFBU0UsTSxFQUFRO0FBQ2xDLFVBQU1rQixVQUFVLENBQUNELE9BQUQsSUFBWTlDLFFBQVEyQixPQUFSLENBQTVCO0FBQ0EsVUFBTXBCLFFBQVF3QyxXQUFXLEtBQUtMLFFBQUwsQ0FBY2YsT0FBZCxFQUF1QkUsTUFBdkIsQ0FBekI7QUFDQSxVQUFNbUIsT0FBT3JCLFVBQVU5QixjQUFjZ0MsTUFBZCxFQUFzQixNQUF0QixFQUE4QkYsT0FBOUIsQ0FBdkI7QUFDQSxhQUFPLENBQ0wsQ0FBQ29CLE9BQUQsMEJBQWdDbEQsY0FBY2dDLE1BQWQsRUFBc0JpQixPQUF0QixDQUFoQyxPQURLLEVBRUx2QyxLQUZLLEdBR0ZBLFFBQVEsUUFBUixHQUFtQixLQUhqQixXQUcyQnlDLElBSDNCLDZCQUFQO0FBS0Q7O0FBRUQ7QUFDQTtBQUNBOzs7OzRDQUN3QjtBQUFBOztBQUN0QixhQUFPLG1CQUFXO0FBQUEscUNBQzBCLE9BQUtKLHFCQUFMLENBQTJCRSxPQUEzQixDQUQxQjtBQUFBLFlBQ1RuQixPQURTLDBCQUNUQSxPQURTO0FBQUEsWUFDQVcsY0FEQSwwQkFDQUEsY0FEQTtBQUFBLFlBQ2dCVCxNQURoQiwwQkFDZ0JBLE1BRGhCOztBQUVoQixlQUFPRixRQUFRc0IsU0FBUixDQUFrQkgsT0FBbEIsRUFBMkJSLGNBQTNCLEVBQTJDVCxNQUEzQyxDQUFQO0FBQ0QsT0FIRDtBQUlEOzs7OztBQUlZLFNBQVNqQyxhQUFULEdBQWdDO0FBQUEscUNBQU5FLElBQU07QUFBTkEsUUFBTTtBQUFBOztBQUM3Qyw0Q0FBV0kscUJBQVgsZ0JBQW9DSixJQUFwQztBQUNEIiwiZmlsZSI6ImNvbW1hbmQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RlbGVnYXRpbmdNZXNzYWdlSGFuZGxlcn0gZnJvbSAnLi9kZWxlZ2F0ZSc7XG5pbXBvcnQgY3JlYXRlTWF0Y2hlciBmcm9tICcuL21hdGNoZXInO1xuaW1wb3J0IGNyZWF0ZVBhcnNlciBmcm9tICcuL3BhcnNlcic7XG5cbmZ1bmN0aW9uIGZvcm1hdENvbW1hbmQoLi4uYXJncykge1xuICAvLyBjb25zb2xlLmxvZyhgZm9ybWF0Q29tbWFuZCA8JHthcmdzLmpvaW4oJz4gPCcpfT5gKTtcbiAgcmV0dXJuIGFyZ3MuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJyAnKTtcbn1cblxuZXhwb3J0IGNsYXNzIENvbW1hbmRNZXNzYWdlSGFuZGxlciBleHRlbmRzIERlbGVnYXRpbmdNZXNzYWdlSGFuZGxlciB7XG5cbiAgY29uc3RydWN0b3Iob3B0aW9ucyA9IHt9LCBjaGlsZHJlbikge1xuICAgIHN1cGVyKG9wdGlvbnMsIGNoaWxkcmVuKTtcbiAgICBjb25zdCB7bmFtZSwgYWxpYXNlcywgdXNhZ2UsIGRlc2NyaXB0aW9uLCBkZXRhaWxzLCBpc1BhcmVudH0gPSBvcHRpb25zO1xuICAgIHRoaXMuaXNDb21tYW5kID0gdHJ1ZTtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMudXNhZ2UgPSB1c2FnZTtcbiAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gICAgdGhpcy5kZXRhaWxzID0gZGV0YWlscztcbiAgICB0aGlzLmlzUGFyZW50ID0gaXNQYXJlbnQ7XG4gICAgLy8gRW5zdXJlIGNoaWxkcmVuIGlzIGFuIGFycmF5LlxuICAgIGlmICghQXJyYXkuaXNBcnJheSh0aGlzLmNoaWxkcmVuKSkge1xuICAgICAgdGhpcy5jaGlsZHJlbiA9IFt0aGlzLmNoaWxkcmVuXTtcbiAgICB9XG4gICAgLy8gSWYgdGhpcyBjb21tYW5kIGhhcyBubyBuYW1lLCBpdCdzIHRoZSBcInRvcC1sZXZlbFwiIGNvbW1hbmQuIEFkZCBhIGhlbHBcbiAgICAvLyBjb21tYW5kIGFuZCBhIGZhbGxiYWNrIGhhbmRsZXIgZm9yIHVzYWdlIGluZm9ybWF0aW9uLlxuICAgIGlmIChpc1BhcmVudCkge1xuICAgICAgdGhpcy5jaGlsZHJlbiA9IFtcbiAgICAgICAgLi4udGhpcy5jaGlsZHJlbixcbiAgICAgICAgdGhpcy5jcmVhdGVIZWxwQ29tbWFuZCgpLFxuICAgICAgICB0aGlzLmNyZWF0ZUZhbGxiYWNrSGFuZGxlcigpLFxuICAgICAgXTtcbiAgICB9XG4gICAgLy8gS2VlcCB0cmFjayBvZiB0aGlzIGNvbW1hbmQncyBzdWItY29tbWFuZHMgZm9yIGxhdGVyIHVzZS5cbiAgICB0aGlzLnN1YkNvbW1hbmRzID0gdGhpcy5jaGlsZHJlbi5maWx0ZXIoYyA9PiBjLmlzQ29tbWFuZCk7XG4gICAgLy8gSWYgdGhpcyBjb21tYW5kIGhhcyBhIG5hbWUgb3IgYWxpYXNlcywgY3JlYXRlIGEgbWF0Y2hpbmcgd3JhcHBlciBhcm91bmRcbiAgICAvLyBjaGlsZHJlbiB0aGF0IHJlc3BvbmRzIG9ubHkgdG8gdGhhdCBuYW1lIG9yIGFuIGFsaWFzLlxuICAgIGlmIChuYW1lIHx8IGFsaWFzZXMpIHtcbiAgICAgIGNvbnN0IGl0ZW1zID0gIWFsaWFzZXMgPyBbXSA6IEFycmF5LmlzQXJyYXkoYWxpYXNlcykgPyBhbGlhc2VzIDogW2FsaWFzZXNdO1xuICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgaXRlbXMudW5zaGlmdChuYW1lKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG9yaWdDaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XG4gICAgICB0aGlzLmNoaWxkcmVuID0gaXRlbXMubWFwKGl0ZW0gPT4gY3JlYXRlTWF0Y2hlcih7bWF0Y2g6IGl0ZW19LCBvcmlnQ2hpbGRyZW4pKTtcbiAgICAgIGlmICghbmFtZSkge1xuICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2gob3JpZ0NoaWxkcmVuKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBEb2VzIHRoaXMgY29tbWFuZCBoYXZlIHN1Yi1jb21tYW5kcz9cbiAgaGFzU3ViQ29tbWFuZHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3ViQ29tbWFuZHMubGVuZ3RoID4gMDtcbiAgfVxuXG4gIC8vIFNlYXJjaCBmb3IgYSBtYXRjaGluZyBzdWItY29tbWFuZC4gSWYgYW4gZXhhY3QgbWF0Y2ggaXNuJ3QgZm91bmQsIHJldHVyblxuICAvLyB0aGUgY2xvc2VzdCBtYXRjaGluZyBwYXJlbnQgY29tbWFuZC4gUmV0dXJucyB0aGUgbWF0Y2hlZCBjb21tYW5kLCB0aGUgZnVsbFxuICAvLyBuYW1lIChpZS4gcGF0aCkgdG8gdGhhdCBjb21tYW5kLCBhbmQgd2hldGhlciBvciBub3QgaXQgd2FzIGFuIGV4YWN0IG1hdGNoLlxuICBnZXRNYXRjaGluZ1N1YkNvbW1hbmQoc2VhcmNoKSB7XG4gICAgbGV0IGNvbW1hbmQgPSB0aGlzOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNvbnNpc3RlbnQtdGhpc1xuICAgIGxldCBleGFjdCA9IHRydWU7XG4gICAgY29uc3QgcHJlZml4ID0gdGhpcy5pc1BhcmVudCA/IHRoaXMubmFtZSA6ICcnO1xuICAgIGNvbnN0IHN1YkNvbW1hbmROYW1lUGFydHMgPSBbXTtcbiAgICBpZiAoc2VhcmNoKSB7XG4gICAgICBjb25zdCBwYXJ0cyA9IHNlYXJjaC5zcGxpdCgvXFxzKy8pO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBzdWJDb21tYW5kID0gY29tbWFuZC5zdWJDb21tYW5kcy5maW5kKCh7bmFtZX0pID0+IHtcbiAgICAgICAgICBpZiAobmFtZSkge1xuICAgICAgICAgICAgLy8gSGFuZGxlIHNwYWNlcyBpbiBjb21tYW5kIG5hbWVzLlxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IGk7IGogPCBwYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICBpZiAocGFydHMuc2xpY2UoaSwgaiArIDEpLmpvaW4oJyAnKSA9PT0gbmFtZSkge1xuICAgICAgICAgICAgICAgIGkgPSBqO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghc3ViQ29tbWFuZCkge1xuICAgICAgICAgIGV4YWN0ID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY29tbWFuZCA9IHN1YkNvbW1hbmQ7XG4gICAgICAgIHN1YkNvbW1hbmROYW1lUGFydHMucHVzaChjb21tYW5kLm5hbWUpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgY29tbWFuZCxcbiAgICAgIHByZWZpeCxcbiAgICAgIGV4YWN0LFxuICAgICAgc3ViQ29tbWFuZE5hbWU6IHN1YkNvbW1hbmROYW1lUGFydHMuam9pbignICcpLFxuICAgIH07XG4gIH1cblxuICAvLyBEaXNwbGF5IHVzYWdlIGluZm8gZm9yIHRoaXMgY29tbWFuZCwgZ2l2ZW4gdGhlIHNwZWNpZmllZCBjb21tYW5kIG5hbWUuXG4gIGdldFVzYWdlKGNvbW1hbmQsIHByZWZpeCkge1xuICAgIGlmICghdGhpcy5uYW1lKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbW1hbmQgPSBmb3JtYXRDb21tYW5kKHByZWZpeCwgY29tbWFuZCk7XG4gICAgY29uc3QgdXNhZ2VGb3JtYXR0ZXIgPSBkZXRhaWxzID0+IGZvcm1hdENvbW1hbmQoY29tbWFuZCwgZGV0YWlscyk7XG4gICAgLy8gSWYgdXNhZ2UgaXMgYSBmdW5jdGlvbiwgcGFzcyB0aGUgY29tbWFuZCB0byBpdC5cbiAgICBjb25zdCB1c2FnZSA9IHR5cGVvZiB0aGlzLnVzYWdlID09PSAnZnVuY3Rpb24nID8gdGhpcy51c2FnZShjb21tYW5kKSA6XG4gICAgICAvLyBJZiB1c2FnZSBpcyBhIHN0cmluZywgZm9ybWF0IGl0LlxuICAgICAgdGhpcy51c2FnZSA/IHVzYWdlRm9ybWF0dGVyKHRoaXMudXNhZ2UpIDpcbiAgICAgIC8vIElmIHVzYWdlIGlzbid0IHNwZWNpZmllZCwgYnV0IHRoZSBjb21tYW5kIGhhcyBzdWItY29tbWFuZHMsIGZvcm1hdCBpdC5cbiAgICAgIHRoaXMuaGFzU3ViQ29tbWFuZHMoKSA/IHVzYWdlRm9ybWF0dGVyKCc8Y29tbWFuZD4nKSA6XG4gICAgICAvLyBPdGhlcndpc2UganVzdCByZXR1cm4gdGhlIGNvbW1hbmQsXG4gICAgICBjb21tYW5kO1xuICAgIHJldHVybiBgVXNhZ2U6IFxcYCR7dXNhZ2V9XFxgYDtcbiAgfVxuXG4gIC8vIEdldCBoZWxwIGluZm8gZm9yIHRoaXMgY29tbWFuZCwgZ2l2ZW4gdGhlIHNwZWNpZmllZCBhcmd1bWVudHMuXG4gIGhlbHBJbmZvKHNlYXJjaCwgY29tbWFuZCwgcHJlZml4LCBleGFjdCkge1xuICAgIGNvbnN0IGhlbHBUZXh0ID0gY29tbWFuZCA/IGAgZm9yICoke2Zvcm1hdENvbW1hbmQocHJlZml4LCBjb21tYW5kKX0qYCA6IHByZWZpeCA/IGAgZm9yICoke3ByZWZpeH0qYCA6ICcnO1xuICAgIHJldHVybiBbXG4gICAgICAhZXhhY3QgJiYgYF9Vbmtub3duIGNvbW1hbmQgKiR7Zm9ybWF0Q29tbWFuZChwcmVmaXgsIHNlYXJjaCl9Kiwgc2hvd2luZyBoZWxwJHtoZWxwVGV4dH0uX2AsXG4gICAgICB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgdGhpcy5nZXRVc2FnZShjb21tYW5kLCBwcmVmaXgpLFxuICAgICAgdGhpcy5oYXNTdWJDb21tYW5kcygpICYmICcqQ29tbWFuZHM6KicsXG4gICAgICB0aGlzLnN1YkNvbW1hbmRzLm1hcChjID0+IGA+ICoke2MubmFtZX0qIC0gJHtjLmRlc2NyaXB0aW9ufWApLFxuICAgICAgdGhpcy5kZXRhaWxzLFxuICAgIF07XG4gIH1cblxuICAvLyBDcmVhdGUgYSB0b3AtbGV2ZWwgXCJoZWxwXCIgY29tbWFuZCBoYW5kbGVyIHRoYXQgZGlzcGxheXMgaGVscCBmb3IgdGhlXG4gIC8vIGNsb3Nlc3QgbWF0Y2hpbmcgY29tbWFuZCB0byB3aGF0IHdhcyBzcGVjaWZpZWQuXG4gIGNyZWF0ZUhlbHBDb21tYW5kKCkge1xuICAgIHJldHVybiBjcmVhdGVDb21tYW5kKHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11c2UtYmVmb3JlLWRlZmluZVxuICAgICAgbmFtZTogJ2hlbHAnLFxuICAgICAgZGVzY3JpcHRpb246ICdHZXQgaGVscCBmb3IgdGhlIHNwZWNpZmllZCBjb21tYW5kLicsXG4gICAgICB1c2FnZTogJzxjb21tYW5kPicsXG4gICAgICBoYW5kbGVNZXNzYWdlOiBjcmVhdGVQYXJzZXIoKHthcmdzfSkgPT4ge1xuICAgICAgICBjb25zdCBzZWFyY2ggPSBhcmdzLmpvaW4oJyAnKTtcbiAgICAgICAgY29uc3Qge2NvbW1hbmQsIHN1YkNvbW1hbmROYW1lLCBwcmVmaXgsIGV4YWN0fSA9IHRoaXMuZ2V0TWF0Y2hpbmdTdWJDb21tYW5kKHNlYXJjaCk7XG4gICAgICAgIHJldHVybiBjb21tYW5kLmhlbHBJbmZvKHNlYXJjaCwgc3ViQ29tbWFuZE5hbWUsIHByZWZpeCwgZXhhY3QpO1xuICAgICAgfSksXG4gICAgfSk7XG4gIH1cblxuICAvLyBHZXQgdXNhZ2UgaW5mbyBmb3IgdGhpcyBjb21tYW5kLCBnaXZlbiB0aGUgc3BlY2lmaWVkIGFyZ3VtZW50cy5cbiAgdXNhZ2VJbmZvKG1lc3NhZ2UsIGNvbW1hbmQsIHByZWZpeCkge1xuICAgIGNvbnN0IGlzTWF0Y2ggPSAhbWVzc2FnZSB8fCBCb29sZWFuKGNvbW1hbmQpO1xuICAgIGNvbnN0IHVzYWdlID0gaXNNYXRjaCAmJiB0aGlzLmdldFVzYWdlKGNvbW1hbmQsIHByZWZpeCk7XG4gICAgY29uc3QgaGVscCA9IGNvbW1hbmQgPSBmb3JtYXRDb21tYW5kKHByZWZpeCwgJ2hlbHAnLCBjb21tYW5kKTtcbiAgICByZXR1cm4gW1xuICAgICAgIWlzTWF0Y2ggJiYgYFVua25vd24gY29tbWFuZCAqJHtmb3JtYXRDb21tYW5kKHByZWZpeCwgbWVzc2FnZSl9Ki5gLFxuICAgICAgdXNhZ2UsXG4gICAgICBgJHt1c2FnZSA/ICdPciB0cnknIDogJ1RyeSd9ICoke2hlbHB9KiBmb3IgbW9yZSBpbmZvcm1hdGlvbi5gLFxuICAgIF07XG4gIH1cblxuICAvLyBDcmVhdGUgYSB0b3AtbGV2ZWwgXCJmYWxsYmFja1wiIGhhbmRsZXIgdGhhdCBkaXNwbGF5cyB1c2FnZSBpbmZvIGZvciB0aGVcbiAgLy8gY2xvc2VzdCBtYXRjaGluZyBjb21tYW5kIHRvIHdoYXQgd2FzIHNwZWNpZmllZC4gVGhpcyBoYW5kbGVyIG9ubHkgcnVucyBpZlxuICAvLyBldmVyeSBvdGhlciBoYW5kbGVyIHJldHVybnMgZmFsc2UuIEllLiBubyBvdGhlciBjb21tYW5kIG1hdGNoZWQuXG4gIGNyZWF0ZUZhbGxiYWNrSGFuZGxlcigpIHtcbiAgICByZXR1cm4gbWVzc2FnZSA9PiB7XG4gICAgICBjb25zdCB7Y29tbWFuZCwgc3ViQ29tbWFuZE5hbWUsIHByZWZpeH0gPSB0aGlzLmdldE1hdGNoaW5nU3ViQ29tbWFuZChtZXNzYWdlKTtcbiAgICAgIHJldHVybiBjb21tYW5kLnVzYWdlSW5mbyhtZXNzYWdlLCBzdWJDb21tYW5kTmFtZSwgcHJlZml4KTtcbiAgICB9O1xuICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlQ29tbWFuZCguLi5hcmdzKSB7XG4gIHJldHVybiBuZXcgQ29tbWFuZE1lc3NhZ2VIYW5kbGVyKC4uLmFyZ3MpO1xufVxuIl19
